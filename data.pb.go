// Code generated by protoc-gen-go.
// source: data.proto
// DO NOT EDIT!

/*
Package protos is a generated protocol buffer package.

It is generated from these files:
	data.proto
	data_battle.proto
	data_capture.proto
	data_gym.proto
	data_logs.proto
	data_player.proto
	enums.proto
	inventory.proto
	inventory_item.proto
	map_fort.proto
	map_pokemon.proto
	maps.proto
	networking_envelopes.proto
	networking_requests.proto
	networking_requests_messages.proto
	networking_responses.proto
	settings.proto
	settings_master.proto
	settings_master_item.proto
	settings_master_pokemon.proto

It has these top-level messages:
	AssetDigestEntry
	BuddyPokemon
	DownloadUrlEntry
	PlayerBadge
	PlayerData
	PokedexEntry
	PokemonData
	BattleAction
	BattleLog
	BattleParticipant
	BattlePokemonInfo
	BattleResults
	CaptureAward
	CaptureProbability
	GymMembership
	GymState
	ActionLogEntry
	BuddyPokemonLogEntry
	CatchPokemonLogEntry
	FortSearchLogEntry
	ContactSettings
	Currency
	DailyBonus
	EquippedBadge
	PlayerAvatar
	PlayerCamera
	PlayerCurrency
	PlayerPublicProfile
	PlayerStats
	AppliedItem
	AppliedItems
	Candy
	EggIncubator
	EggIncubators
	InventoryDelta
	InventoryItem
	InventoryItemData
	InventoryUpgrade
	InventoryUpgrades
	ItemAward
	ItemData
	FortData
	FortLureInfo
	FortModifier
	FortSummary
	MapPokemon
	NearbyPokemon
	WildPokemon
	MapCell
	SpawnPoint
	AuthTicket
	RequestEnvelope
	ResponseEnvelope
	Signature
	Unknown6
	Unknown6Response
	Request
	AddFortModifierMessage
	AttackGymMessage
	CatchPokemonMessage
	CheckAwardedBadgesMessage
	CheckChallengeMessage
	CheckCodenameAvailableMessage
	ClaimCodenameMessage
	CollectDailyBonusMessage
	CollectDailyDefenderBonusMessage
	DiskEncounterMessage
	DownloadItemTemplatesMessage
	DownloadRemoteConfigVersionMessage
	DownloadSettingsMessage
	EchoMessage
	EncounterMessage
	EncounterTutorialCompleteMessage
	EquipBadgeMessage
	EvolvePokemonMessage
	FortDeployPokemonMessage
	FortDetailsMessage
	FortRecallPokemonMessage
	FortSearchMessage
	GetAssetDigestMessage
	GetBuddyWalkedMessage
	GetDownloadUrlsMessage
	GetGymDetailsMessage
	GetHatchedEggsMessage
	GetIncensePokemonMessage
	GetInventoryMessage
	GetMapObjectsMessage
	GetPlayerMessage
	GetPlayerProfileMessage
	GetSuggestedCodenamesMessage
	IncenseEncounterMessage
	LevelUpRewardsMessage
	MarkTutorialCompleteMessage
	NicknamePokemonMessage
	PlayerUpdateMessage
	RecycleInventoryItemMessage
	ReleasePokemonMessage
	SetAvatarMessage
	SetBuddyPokemonMessage
	SetContactSettingsMessage
	SetFavoritePokemonMessage
	SetPlayerTeamMessage
	SfidaActionLogMessage
	StartGymBattleMessage
	UpgradePokemonMessage
	UseIncenseMessage
	UseItemCaptureMessage
	UseItemEggIncubatorMessage
	UseItemGymMessage
	UseItemPotionMessage
	UseItemReviveMessage
	UseItemXpBoostMessage
	VerifyChallengeMessage
	AddFortModifierResponse
	AttackGymResponse
	CatchPokemonResponse
	CheckAwardedBadgesResponse
	CheckChallengeResponse
	CheckCodenameAvailableResponse
	ClaimCodenameResponse
	CollectDailyBonusResponse
	CollectDailyDefenderBonusResponse
	DiskEncounterResponse
	DownloadItemTemplatesResponse
	DownloadRemoteConfigVersionResponse
	DownloadSettingsResponse
	EchoResponse
	EncounterResponse
	EncounterTutorialCompleteResponse
	EquipBadgeResponse
	EvolvePokemonResponse
	FortDeployPokemonResponse
	FortDetailsResponse
	FortRecallPokemonResponse
	FortSearchResponse
	GetAssetDigestResponse
	GetBuddyWalkedResponse
	GetDownloadUrlsResponse
	GetGymDetailsResponse
	GetHatchedEggsResponse
	GetIncensePokemonResponse
	GetInventoryResponse
	GetMapObjectsResponse
	GetPlayerProfileResponse
	GetPlayerResponse
	GetSuggestedCodenamesResponse
	IncenseEncounterResponse
	LevelUpRewardsResponse
	MarkTutorialCompleteResponse
	NicknamePokemonResponse
	PlayerUpdateResponse
	RecycleInventoryItemResponse
	ReleasePokemonResponse
	SetAvatarResponse
	SetBuddyPokemonResponse
	SetContactSettingsResponse
	SetFavoritePokemonResponse
	SetPlayerTeamResponse
	SfidaActionLogResponse
	StartGymBattleResponse
	UpgradePokemonResponse
	UseIncenseResponse
	UseItemCaptureResponse
	UseItemEggIncubatorResponse
	UseItemGymResponse
	UseItemPotionResponse
	UseItemReviveResponse
	UseItemXpBoostResponse
	VerifyChallengeResponse
	DownloadSettingsAction
	FortSettings
	GlobalSettings
	GpsSettings
	InventorySettings
	LevelSettings
	MapSettings
	BadgeSettings
	CameraSettings
	EncounterSettings
	EquippedBadgeSettings
	GymBattleSettings
	GymLevelSettings
	IapItemDisplay
	IapSettings
	ItemSettings
	MoveSequenceSettings
	MoveSettings
	PlayerLevelSettings
	PokemonSettings
	PokemonUpgradeSettings
	TypeEffectiveSettings
	BattleAttributes
	EggIncubatorAttributes
	ExperienceBoostAttributes
	FoodAttributes
	FortModifierAttributes
	IncenseAttributes
	InventoryUpgradeAttributes
	PokeballAttributes
	PotionAttributes
	ReviveAttributes
	CameraAttributes
	EncounterAttributes
	StatsAttributes
*/
package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Ignoring public import of ActivityType from enums.proto

// Ignoring public import of BadgeType from enums.proto

// Ignoring public import of CameraInterpolation from enums.proto

// Ignoring public import of CameraTarget from enums.proto

// Ignoring public import of Gender from enums.proto

// Ignoring public import of HoloIapItemCategory from enums.proto

// Ignoring public import of ItemCategory from enums.proto

// Ignoring public import of ItemEffect from enums.proto

// Ignoring public import of Platform from enums.proto

// Ignoring public import of PokemonFamilyId from enums.proto

// Ignoring public import of PokemonId from enums.proto

// Ignoring public import of PokemonMove from enums.proto

// Ignoring public import of PokemonMovementType from enums.proto

// Ignoring public import of PokemonRarity from enums.proto

// Ignoring public import of PokemonType from enums.proto

// Ignoring public import of TeamColor from enums.proto

// Ignoring public import of TutorialState from enums.proto

// Ignoring public import of ContactSettings from data_player.proto

// Ignoring public import of Currency from data_player.proto

// Ignoring public import of DailyBonus from data_player.proto

// Ignoring public import of EquippedBadge from data_player.proto

// Ignoring public import of PlayerAvatar from data_player.proto

// Ignoring public import of PlayerCamera from data_player.proto

// Ignoring public import of PlayerCurrency from data_player.proto

// Ignoring public import of PlayerPublicProfile from data_player.proto

// Ignoring public import of PlayerStats from data_player.proto

// Ignoring public import of ItemAward from inventory_item.proto

// Ignoring public import of ItemData from inventory_item.proto

// Ignoring public import of ItemId from inventory_item.proto

// Ignoring public import of ItemType from inventory_item.proto

type AssetDigestEntry struct {
	AssetId    string `protobuf:"bytes,1,opt,name=asset_id,json=assetId" json:"asset_id,omitempty"`
	BundleName string `protobuf:"bytes,2,opt,name=bundle_name,json=bundleName" json:"bundle_name,omitempty"`
	Version    int64  `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	Checksum   uint32 `protobuf:"fixed32,4,opt,name=checksum" json:"checksum,omitempty"`
	Size       int32  `protobuf:"varint,5,opt,name=size" json:"size,omitempty"`
	Key        []byte `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *AssetDigestEntry) Reset()                    { *m = AssetDigestEntry{} }
func (m *AssetDigestEntry) String() string            { return proto.CompactTextString(m) }
func (*AssetDigestEntry) ProtoMessage()               {}
func (*AssetDigestEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type BuddyPokemon struct {
	Id            uint64  `protobuf:"fixed64,1,opt,name=id" json:"id,omitempty"`
	StartKmWalked float64 `protobuf:"fixed64,2,opt,name=start_km_walked,json=startKmWalked" json:"start_km_walked,omitempty"`
	LastKmAwarded float64 `protobuf:"fixed64,3,opt,name=last_km_awarded,json=lastKmAwarded" json:"last_km_awarded,omitempty"`
}

func (m *BuddyPokemon) Reset()                    { *m = BuddyPokemon{} }
func (m *BuddyPokemon) String() string            { return proto.CompactTextString(m) }
func (*BuddyPokemon) ProtoMessage()               {}
func (*BuddyPokemon) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type DownloadUrlEntry struct {
	AssetId  string `protobuf:"bytes,1,opt,name=asset_id,json=assetId" json:"asset_id,omitempty"`
	Url      string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	Size     int32  `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	Checksum uint32 `protobuf:"fixed32,4,opt,name=checksum" json:"checksum,omitempty"`
}

func (m *DownloadUrlEntry) Reset()                    { *m = DownloadUrlEntry{} }
func (m *DownloadUrlEntry) String() string            { return proto.CompactTextString(m) }
func (*DownloadUrlEntry) ProtoMessage()               {}
func (*DownloadUrlEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type PlayerBadge struct {
	BadgeType    BadgeType `protobuf:"varint,1,opt,name=badge_type,json=badgeType,enum=POGOProtos.Enums.BadgeType" json:"badge_type,omitempty"`
	Rank         int32     `protobuf:"varint,2,opt,name=rank" json:"rank,omitempty"`
	StartValue   int32     `protobuf:"varint,3,opt,name=start_value,json=startValue" json:"start_value,omitempty"`
	EndValue     int32     `protobuf:"varint,4,opt,name=end_value,json=endValue" json:"end_value,omitempty"`
	CurrentValue float64   `protobuf:"fixed64,5,opt,name=current_value,json=currentValue" json:"current_value,omitempty"`
}

func (m *PlayerBadge) Reset()                    { *m = PlayerBadge{} }
func (m *PlayerBadge) String() string            { return proto.CompactTextString(m) }
func (*PlayerBadge) ProtoMessage()               {}
func (*PlayerBadge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type PlayerData struct {
	CreationTimestampMs     int64            `protobuf:"varint,1,opt,name=creation_timestamp_ms,json=creationTimestampMs" json:"creation_timestamp_ms,omitempty"`
	Username                string           `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Team                    TeamColor        `protobuf:"varint,5,opt,name=team,enum=POGOProtos.Enums.TeamColor" json:"team,omitempty"`
	TutorialState           []TutorialState  `protobuf:"varint,7,rep,packed,name=tutorial_state,json=tutorialState,enum=POGOProtos.Enums.TutorialState" json:"tutorial_state,omitempty"`
	Avatar                  *PlayerAvatar    `protobuf:"bytes,8,opt,name=avatar" json:"avatar,omitempty"`
	MaxPokemonStorage       int32            `protobuf:"varint,9,opt,name=max_pokemon_storage,json=maxPokemonStorage" json:"max_pokemon_storage,omitempty"`
	MaxItemStorage          int32            `protobuf:"varint,10,opt,name=max_item_storage,json=maxItemStorage" json:"max_item_storage,omitempty"`
	DailyBonus              *DailyBonus      `protobuf:"bytes,11,opt,name=daily_bonus,json=dailyBonus" json:"daily_bonus,omitempty"`
	EquippedBadge           *EquippedBadge   `protobuf:"bytes,12,opt,name=equipped_badge,json=equippedBadge" json:"equipped_badge,omitempty"`
	ContactSettings         *ContactSettings `protobuf:"bytes,13,opt,name=contact_settings,json=contactSettings" json:"contact_settings,omitempty"`
	Currencies              []*Currency      `protobuf:"bytes,14,rep,name=currencies" json:"currencies,omitempty"`
	RemainingCodenameClaims int32            `protobuf:"varint,15,opt,name=remaining_codename_claims,json=remainingCodenameClaims" json:"remaining_codename_claims,omitempty"`
	BuddyPokemon            *BuddyPokemon    `protobuf:"bytes,16,opt,name=buddy_pokemon,json=buddyPokemon" json:"buddy_pokemon,omitempty"`
}

func (m *PlayerData) Reset()                    { *m = PlayerData{} }
func (m *PlayerData) String() string            { return proto.CompactTextString(m) }
func (*PlayerData) ProtoMessage()               {}
func (*PlayerData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PlayerData) GetAvatar() *PlayerAvatar {
	if m != nil {
		return m.Avatar
	}
	return nil
}

func (m *PlayerData) GetDailyBonus() *DailyBonus {
	if m != nil {
		return m.DailyBonus
	}
	return nil
}

func (m *PlayerData) GetEquippedBadge() *EquippedBadge {
	if m != nil {
		return m.EquippedBadge
	}
	return nil
}

func (m *PlayerData) GetContactSettings() *ContactSettings {
	if m != nil {
		return m.ContactSettings
	}
	return nil
}

func (m *PlayerData) GetCurrencies() []*Currency {
	if m != nil {
		return m.Currencies
	}
	return nil
}

func (m *PlayerData) GetBuddyPokemon() *BuddyPokemon {
	if m != nil {
		return m.BuddyPokemon
	}
	return nil
}

type PokedexEntry struct {
	PokemonId            PokemonId `protobuf:"varint,1,opt,name=pokemon_id,json=pokemonId,enum=POGOProtos.Enums.PokemonId" json:"pokemon_id,omitempty"`
	TimesEncountered     int32     `protobuf:"varint,2,opt,name=times_encountered,json=timesEncountered" json:"times_encountered,omitempty"`
	TimesCaptured        int32     `protobuf:"varint,3,opt,name=times_captured,json=timesCaptured" json:"times_captured,omitempty"`
	EvolutionStonePieces int32     `protobuf:"varint,4,opt,name=evolution_stone_pieces,json=evolutionStonePieces" json:"evolution_stone_pieces,omitempty"`
	EvolutionStones      int32     `protobuf:"varint,5,opt,name=evolution_stones,json=evolutionStones" json:"evolution_stones,omitempty"`
}

func (m *PokedexEntry) Reset()                    { *m = PokedexEntry{} }
func (m *PokedexEntry) String() string            { return proto.CompactTextString(m) }
func (*PokedexEntry) ProtoMessage()               {}
func (*PokedexEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type PokemonData struct {
	Id                     uint64      `protobuf:"fixed64,1,opt,name=id" json:"id,omitempty"`
	PokemonId              PokemonId   `protobuf:"varint,2,opt,name=pokemon_id,json=pokemonId,enum=POGOProtos.Enums.PokemonId" json:"pokemon_id,omitempty"`
	Cp                     int32       `protobuf:"varint,3,opt,name=cp" json:"cp,omitempty"`
	Stamina                int32       `protobuf:"varint,4,opt,name=stamina" json:"stamina,omitempty"`
	StaminaMax             int32       `protobuf:"varint,5,opt,name=stamina_max,json=staminaMax" json:"stamina_max,omitempty"`
	Move_1                 PokemonMove `protobuf:"varint,6,opt,name=move_1,json=move1,enum=POGOProtos.Enums.PokemonMove" json:"move_1,omitempty"`
	Move_2                 PokemonMove `protobuf:"varint,7,opt,name=move_2,json=move2,enum=POGOProtos.Enums.PokemonMove" json:"move_2,omitempty"`
	DeployedFortId         string      `protobuf:"bytes,8,opt,name=deployed_fort_id,json=deployedFortId" json:"deployed_fort_id,omitempty"`
	OwnerName              string      `protobuf:"bytes,9,opt,name=owner_name,json=ownerName" json:"owner_name,omitempty"`
	IsEgg                  bool        `protobuf:"varint,10,opt,name=is_egg,json=isEgg" json:"is_egg,omitempty"`
	EggKmWalkedTarget      float64     `protobuf:"fixed64,11,opt,name=egg_km_walked_target,json=eggKmWalkedTarget" json:"egg_km_walked_target,omitempty"`
	EggKmWalkedStart       float64     `protobuf:"fixed64,12,opt,name=egg_km_walked_start,json=eggKmWalkedStart" json:"egg_km_walked_start,omitempty"`
	Origin                 int32       `protobuf:"varint,14,opt,name=origin" json:"origin,omitempty"`
	HeightM                float32     `protobuf:"fixed32,15,opt,name=height_m,json=heightM" json:"height_m,omitempty"`
	WeightKg               float32     `protobuf:"fixed32,16,opt,name=weight_kg,json=weightKg" json:"weight_kg,omitempty"`
	IndividualAttack       int32       `protobuf:"varint,17,opt,name=individual_attack,json=individualAttack" json:"individual_attack,omitempty"`
	IndividualDefense      int32       `protobuf:"varint,18,opt,name=individual_defense,json=individualDefense" json:"individual_defense,omitempty"`
	IndividualStamina      int32       `protobuf:"varint,19,opt,name=individual_stamina,json=individualStamina" json:"individual_stamina,omitempty"`
	CpMultiplier           float32     `protobuf:"fixed32,20,opt,name=cp_multiplier,json=cpMultiplier" json:"cp_multiplier,omitempty"`
	Pokeball               ItemId      `protobuf:"varint,21,opt,name=pokeball,enum=POGOProtos.Inventory.Item.ItemId" json:"pokeball,omitempty"`
	CapturedCellId         uint64      `protobuf:"varint,22,opt,name=captured_cell_id,json=capturedCellId" json:"captured_cell_id,omitempty"`
	BattlesAttacked        int32       `protobuf:"varint,23,opt,name=battles_attacked,json=battlesAttacked" json:"battles_attacked,omitempty"`
	BattlesDefended        int32       `protobuf:"varint,24,opt,name=battles_defended,json=battlesDefended" json:"battles_defended,omitempty"`
	EggIncubatorId         string      `protobuf:"bytes,25,opt,name=egg_incubator_id,json=eggIncubatorId" json:"egg_incubator_id,omitempty"`
	CreationTimeMs         uint64      `protobuf:"varint,26,opt,name=creation_time_ms,json=creationTimeMs" json:"creation_time_ms,omitempty"`
	NumUpgrades            int32       `protobuf:"varint,27,opt,name=num_upgrades,json=numUpgrades" json:"num_upgrades,omitempty"`
	AdditionalCpMultiplier float32     `protobuf:"fixed32,28,opt,name=additional_cp_multiplier,json=additionalCpMultiplier" json:"additional_cp_multiplier,omitempty"`
	Favorite               int32       `protobuf:"varint,29,opt,name=favorite" json:"favorite,omitempty"`
	Nickname               string      `protobuf:"bytes,30,opt,name=nickname" json:"nickname,omitempty"`
	FromFort               int32       `protobuf:"varint,31,opt,name=from_fort,json=fromFort" json:"from_fort,omitempty"`
	BuddyCandyAwarded      int32       `protobuf:"varint,32,opt,name=buddy_candy_awarded,json=buddyCandyAwarded" json:"buddy_candy_awarded,omitempty"`
}

func (m *PokemonData) Reset()                    { *m = PokemonData{} }
func (m *PokemonData) String() string            { return proto.CompactTextString(m) }
func (*PokemonData) ProtoMessage()               {}
func (*PokemonData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func init() {
	proto.RegisterType((*AssetDigestEntry)(nil), "POGOProtos.Data.AssetDigestEntry")
	proto.RegisterType((*BuddyPokemon)(nil), "POGOProtos.Data.BuddyPokemon")
	proto.RegisterType((*DownloadUrlEntry)(nil), "POGOProtos.Data.DownloadUrlEntry")
	proto.RegisterType((*PlayerBadge)(nil), "POGOProtos.Data.PlayerBadge")
	proto.RegisterType((*PlayerData)(nil), "POGOProtos.Data.PlayerData")
	proto.RegisterType((*PokedexEntry)(nil), "POGOProtos.Data.PokedexEntry")
	proto.RegisterType((*PokemonData)(nil), "POGOProtos.Data.PokemonData")
}

func init() { proto.RegisterFile("data.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1384 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x56, 0x6f, 0x73, 0x1b, 0xb5,
	0x13, 0xfe, 0xd9, 0x8e, 0x1d, 0x5b, 0x76, 0x1c, 0x47, 0x49, 0xd3, 0x6b, 0xfa, 0x2b, 0x4d, 0x0d,
	0x85, 0x32, 0x0c, 0x66, 0x1a, 0x78, 0xc1, 0x30, 0x30, 0x43, 0xe2, 0x04, 0x26, 0x94, 0x50, 0x8f,
	0x92, 0xc2, 0x0c, 0x6f, 0x6e, 0xe4, 0x3b, 0xe5, 0xaa, 0xf1, 0xfd, 0x43, 0x77, 0xe7, 0xd4, 0x7c,
	0x14, 0x3e, 0x02, 0x9f, 0x82, 0x37, 0x7c, 0x2e, 0x58, 0xad, 0x74, 0xce, 0x39, 0x24, 0xfc, 0x79,
	0x63, 0x4b, 0xcf, 0x3e, 0x92, 0x56, 0xab, 0x67, 0x77, 0x8f, 0x10, 0x9f, 0xe7, 0x7c, 0x94, 0xaa,
	0x24, 0x4f, 0xe8, 0xe6, 0xe4, 0xe5, 0xd7, 0x2f, 0x27, 0x7a, 0x98, 0x8d, 0x8e, 0x01, 0xde, 0xeb,
	0x8a, 0xb8, 0x88, 0x32, 0x63, 0xdd, 0xdb, 0xd2, 0x4c, 0x37, 0x0d, 0xf9, 0x42, 0x28, 0x0b, 0xed,
	0xc8, 0x78, 0x2e, 0xe2, 0x3c, 0x51, 0x0b, 0x57, 0xe6, 0x22, 0x32, 0xe8, 0xf0, 0xd7, 0x1a, 0x19,
	0x1c, 0x66, 0x99, 0xc8, 0x8f, 0x65, 0x20, 0xb2, 0xfc, 0x24, 0xce, 0xd5, 0x82, 0x3e, 0x20, 0x6d,
	0xae, 0x31, 0x57, 0xfa, 0x4e, 0x6d, 0xbf, 0xf6, 0xac, 0xc3, 0xd6, 0x71, 0x7e, 0xea, 0xd3, 0xc7,
	0xa4, 0x3b, 0x2d, 0x62, 0x3f, 0x14, 0x6e, 0xcc, 0x23, 0xe1, 0xd4, 0xd1, 0x4a, 0x0c, 0xf4, 0x1d,
	0x20, 0xd4, 0x21, 0xeb, 0x73, 0xa1, 0x32, 0x99, 0xc4, 0x4e, 0x03, 0x8c, 0x0d, 0x56, 0x4e, 0xe9,
	0x1e, 0x69, 0x7b, 0xaf, 0x85, 0x37, 0xcb, 0x8a, 0xc8, 0x59, 0x03, 0xd3, 0x3a, 0x5b, 0xce, 0x29,
	0x25, 0x6b, 0x99, 0xfc, 0x59, 0x38, 0x4d, 0xc0, 0x9b, 0x0c, 0xc7, 0x74, 0x40, 0x1a, 0x33, 0xb1,
	0x70, 0x5a, 0x00, 0xf5, 0x98, 0x1e, 0x0e, 0x63, 0xd2, 0x3b, 0x2a, 0x7c, 0x7f, 0x31, 0x49, 0x66,
	0x22, 0x82, 0x1d, 0xfb, 0xa4, 0x6e, 0x3d, 0x6c, 0x31, 0x18, 0xd1, 0x77, 0xc9, 0x66, 0x96, 0x73,
	0x95, 0xbb, 0xb3, 0xc8, 0xbd, 0xe2, 0xe1, 0x4c, 0xf8, 0xe8, 0x60, 0x8d, 0x6d, 0x20, 0xfc, 0x22,
	0xfa, 0x01, 0x41, 0xcd, 0x0b, 0x79, 0x86, 0x34, 0x7e, 0xc5, 0x95, 0x0f, 0xbc, 0x86, 0xe1, 0x69,
	0xf8, 0x45, 0x74, 0x68, 0xc0, 0x61, 0x42, 0x06, 0xc7, 0xc9, 0x55, 0x1c, 0x26, 0xdc, 0x7f, 0xa5,
	0xc2, 0x7f, 0x8c, 0x0d, 0x38, 0x5c, 0xa8, 0xd0, 0xc6, 0x44, 0x0f, 0x97, 0xd7, 0x6a, 0x54, 0xae,
	0xf5, 0x37, 0x61, 0x18, 0xfe, 0x56, 0x23, 0xdd, 0x09, 0x3e, 0xda, 0x11, 0xf7, 0x03, 0x41, 0x3f,
	0x23, 0x64, 0xaa, 0x07, 0x6e, 0xbe, 0x48, 0x05, 0x1e, 0xd7, 0x3f, 0x78, 0x38, 0xaa, 0xbc, 0xfc,
	0x09, 0xbe, 0x39, 0x92, 0x2f, 0x80, 0xc2, 0x3a, 0xd3, 0x72, 0xa8, 0xcf, 0x56, 0x3c, 0x9e, 0xa1,
	0x3b, 0x70, 0xb6, 0x1e, 0xeb, 0xd7, 0x33, 0x01, 0x9a, 0xf3, 0xb0, 0x28, 0xdd, 0x22, 0x08, 0x7d,
	0xaf, 0x11, 0xfa, 0x90, 0x74, 0x44, 0xec, 0x5b, 0xf3, 0x1a, 0x9a, 0xdb, 0x00, 0x18, 0xe3, 0xdb,
	0x64, 0xc3, 0x2b, 0x94, 0x02, 0x11, 0x59, 0x42, 0x13, 0x83, 0xd6, 0xb3, 0x20, 0x92, 0x86, 0xbf,
	0xb4, 0x08, 0x31, 0x57, 0xd0, 0xaa, 0xa4, 0x07, 0xe4, 0x9e, 0xa7, 0x04, 0xcf, 0x41, 0x00, 0x6e,
	0x2e, 0x23, 0x90, 0x18, 0x8f, 0x52, 0x37, 0xca, 0xf0, 0x32, 0x0d, 0xb6, 0x5d, 0x1a, 0x2f, 0x4a,
	0xdb, 0x59, 0xa6, 0x23, 0x54, 0x64, 0x42, 0x55, 0x04, 0xb6, 0x9c, 0xd3, 0x8f, 0xc8, 0x5a, 0x2e,
	0x78, 0x84, 0x47, 0xdf, 0x1a, 0x8b, 0x0b, 0xb0, 0x8e, 0x93, 0x30, 0x51, 0x0c, 0x89, 0xf4, 0x1b,
	0xd2, 0xcf, 0x0b, 0x50, 0xbd, 0xe4, 0xa1, 0x0b, 0x07, 0xe4, 0xc2, 0x59, 0xdf, 0x6f, 0xc0, 0xd2,
	0xc7, 0xb7, 0x2c, 0xb5, 0xbc, 0x73, 0x4d, 0x3b, 0xaa, 0x0f, 0x40, 0x0f, 0x79, 0x15, 0xa2, 0x9f,
	0x93, 0x16, 0x9f, 0xc3, 0xad, 0x94, 0xd3, 0x86, 0xe3, 0xbb, 0x07, 0xef, 0x8c, 0x6e, 0x24, 0xe1,
	0xc8, 0xdc, 0xdc, 0xfe, 0x1d, 0x22, 0x97, 0xd9, 0x35, 0x74, 0x44, 0xb6, 0x23, 0xfe, 0xc6, 0x4d,
	0x8d, 0x78, 0xc1, 0x99, 0x44, 0xf1, 0x40, 0x38, 0x1d, 0x8c, 0xf2, 0x16, 0x98, 0xac, 0xac, 0xcf,
	0x8d, 0x81, 0x3e, 0x23, 0x03, 0xcd, 0xd7, 0xc9, 0xba, 0x24, 0x13, 0x24, 0xf7, 0x01, 0x3f, 0x05,
	0xb8, 0x64, 0x8e, 0x49, 0xd7, 0xe7, 0x32, 0x5c, 0xb8, 0xd3, 0x24, 0x2e, 0x32, 0xa7, 0x8b, 0xce,
	0x0d, 0xef, 0x72, 0xee, 0x58, 0x53, 0x8f, 0x34, 0x93, 0x11, 0x7f, 0x39, 0xa6, 0xdf, 0x92, 0xbe,
	0xf8, 0xa9, 0x90, 0x69, 0x2a, 0x7c, 0x17, 0x55, 0xe4, 0xf4, 0x70, 0x9f, 0xa7, 0x77, 0xed, 0x73,
	0x62, 0xd9, 0xa8, 0x3e, 0xb6, 0x21, 0xaa, 0x53, 0xca, 0xc8, 0xc0, 0x4b, 0xe2, 0x9c, 0x7b, 0xb9,
	0x0b, 0xc9, 0x91, 0xcb, 0x38, 0xc8, 0x9c, 0x0d, 0xdc, 0xef, 0xbd, 0xbb, 0xf6, 0x1b, 0x1b, 0xfe,
	0xb9, 0xa5, 0xb3, 0x4d, 0x6f, 0x15, 0xa0, 0x5f, 0x12, 0x62, 0xa4, 0xe6, 0x49, 0x91, 0x39, 0x7d,
	0x78, 0xc6, 0xee, 0xc1, 0xfe, 0x9d, 0xbb, 0x19, 0xe6, 0x82, 0x55, 0xd6, 0x40, 0x3e, 0x3d, 0x50,
	0x22, 0xe2, 0x32, 0x86, 0xfd, 0x5c, 0x2f, 0xf1, 0x85, 0xd6, 0x94, 0xeb, 0x85, 0x5c, 0x82, 0x22,
	0x37, 0x31, 0xb6, 0xf7, 0x97, 0x84, 0xb1, 0xb5, 0x8f, 0xd1, 0x4c, 0x8f, 0xc8, 0xc6, 0x54, 0x17,
	0x9f, 0xf2, 0x01, 0x9d, 0x01, 0x5e, 0xe7, 0xd1, 0x5f, 0x1c, 0xa8, 0x96, 0x28, 0xd6, 0x9b, 0x56,
	0x66, 0xc3, 0x3f, 0x6a, 0xa4, 0xa7, 0xc7, 0xbe, 0x78, 0x63, 0xaa, 0x09, 0x24, 0x78, 0xa9, 0x07,
	0x5b, 0x4f, 0x6e, 0x15, 0xb5, 0x5d, 0x7f, 0xea, 0xb3, 0x4e, 0x5a, 0x0e, 0xe9, 0x07, 0x64, 0x0b,
	0x33, 0xca, 0x85, 0xcb, 0x25, 0x45, 0x9c, 0x0b, 0x65, 0xeb, 0x5d, 0x93, 0x0d, 0xd0, 0x70, 0x72,
	0x8d, 0xd3, 0xa7, 0x90, 0x06, 0x48, 0xf6, 0x78, 0x9a, 0x17, 0xca, 0x56, 0xbc, 0x26, 0x28, 0x5c,
	0xa3, 0x63, 0x0b, 0xd2, 0x4f, 0xc8, 0xae, 0x98, 0x27, 0x61, 0x81, 0xf9, 0x0a, 0xa2, 0x8b, 0x85,
	0x9b, 0x4a, 0xe1, 0x41, 0xb8, 0x4d, 0x31, 0xd8, 0x59, 0x5a, 0xcf, 0xb5, 0x71, 0x82, 0x36, 0xfa,
	0x3e, 0x19, 0xdc, 0x58, 0x95, 0xd9, 0x4a, 0xbe, 0xb9, 0xca, 0xcf, 0x86, 0xbf, 0x77, 0xa0, 0xc2,
	0x99, 0x2b, 0x60, 0x7d, 0xb8, 0x59, 0xc2, 0x57, 0x03, 0x52, 0xff, 0x4f, 0x01, 0x81, 0xbd, 0xbc,
	0xd4, 0xde, 0x0b, 0x46, 0xba, 0x15, 0xe9, 0x92, 0x22, 0x63, 0x6e, 0xbd, 0x2f, 0xa7, 0xb6, 0x0e,
	0xea, 0xa1, 0x0b, 0xa9, 0x64, 0x7d, 0x25, 0x16, 0x3a, 0xe3, 0x6f, 0x20, 0x0e, 0xad, 0x28, 0x99,
	0x0b, 0xf7, 0x39, 0xb6, 0x9f, 0xfe, 0xea, 0x2b, 0xaf, 0xb8, 0x70, 0x06, 0x34, 0xd6, 0xd4, 0xe4,
	0xe7, 0xcb, 0x55, 0x07, 0x50, 0x63, 0xfe, 0xed, 0xaa, 0x03, 0x9d, 0xe7, 0xbe, 0x48, 0xc3, 0x64,
	0x01, 0x89, 0x77, 0x99, 0x28, 0xec, 0x2c, 0x6d, 0x2c, 0x7b, 0xfd, 0x12, 0xff, 0x0a, 0x60, 0xb8,
	0xe0, 0x23, 0x42, 0xa0, 0x1d, 0x09, 0x65, 0x7a, 0x6f, 0x07, 0x39, 0x1d, 0x44, 0xb0, 0xf5, 0xde,
	0x23, 0x2d, 0x09, 0x6a, 0x08, 0x02, 0x2c, 0x13, 0x6d, 0xd6, 0x94, 0xd9, 0x49, 0x10, 0x40, 0xc9,
	0xdc, 0x01, 0xec, 0xba, 0x27, 0xba, 0x50, 0x8c, 0x02, 0x91, 0x63, 0x99, 0xa8, 0xb1, 0x2d, 0xb0,
	0x95, 0x8d, 0xf1, 0x02, 0x0d, 0xf4, 0x43, 0xb2, 0xbd, 0xba, 0x00, 0x1b, 0x04, 0x96, 0x83, 0x1a,
	0x1b, 0x54, 0xf8, 0xe7, 0x1a, 0xa7, 0xbb, 0xa4, 0x05, 0x35, 0x32, 0x90, 0x31, 0xa4, 0xa4, 0x8e,
	0xa3, 0x9d, 0xe9, 0x4e, 0xf9, 0x5a, 0xc8, 0xe0, 0x75, 0xee, 0x46, 0x98, 0x5b, 0x75, 0xb6, 0x6e,
	0xe6, 0x67, 0xba, 0xcd, 0x5c, 0x19, 0xd3, 0x2c, 0xc0, 0x3c, 0xaa, 0xb3, 0xb6, 0x01, 0x5e, 0x04,
	0x5a, 0xd7, 0x32, 0xf6, 0xe5, 0x5c, 0xfa, 0x05, 0xd4, 0x6c, 0x9e, 0x43, 0x0d, 0x98, 0x39, 0x5b,
	0x46, 0xd7, 0xd7, 0x86, 0x43, 0xc4, 0xc1, 0x57, 0x5a, 0x21, 0xfb, 0xe2, 0x52, 0xc4, 0x99, 0x70,
	0xa8, 0xa9, 0xa9, 0xd7, 0x96, 0x63, 0x63, 0xb8, 0x41, 0x2f, 0xd5, 0xb1, 0x7d, 0x93, 0x7e, 0x6e,
	0x75, 0xa2, 0x3b, 0x1e, 0x74, 0xab, 0x22, 0xcc, 0x65, 0x1a, 0x4a, 0xa1, 0x9c, 0x1d, 0xf4, 0xb5,
	0xe7, 0xa5, 0x67, 0x4b, 0x8c, 0x7e, 0x41, 0xda, 0x5a, 0x83, 0x53, 0x1e, 0x86, 0xce, 0x3d, 0x7c,
	0xf7, 0x27, 0xd5, 0x77, 0x3f, 0x2d, 0x3f, 0xbb, 0x46, 0xba, 0x64, 0xe3, 0x0f, 0xc8, 0x76, 0xb9,
	0x44, 0x3f, 0x7f, 0x99, 0x93, 0xae, 0x27, 0xc2, 0x50, 0x3f, 0xff, 0x2e, 0x6c, 0xb3, 0xc6, 0xfa,
	0x25, 0x3e, 0x06, 0x18, 0x9e, 0x1f, 0xd2, 0x6c, 0x0a, 0xe1, 0x08, 0x21, 0x8b, 0x4d, 0x54, 0x20,
	0x8b, 0xef, 0x9b, 0x34, 0xb3, 0xf8, 0xa1, 0x85, 0xab, 0x54, 0x8c, 0x89, 0xfe, 0xc4, 0x71, 0x56,
	0xa8, 0xc7, 0x16, 0xd6, 0xe7, 0xeb, 0xd7, 0x96, 0xb1, 0x57, 0x80, 0x29, 0x51, 0xfa, 0xfc, 0x07,
	0x46, 0x7e, 0x80, 0x9f, 0x96, 0xf0, 0x29, 0x32, 0x57, 0x7a, 0xb9, 0x6e, 0xe3, 0x7b, 0xd6, 0xd3,
	0x4a, 0x1b, 0x87, 0x0e, 0xfe, 0x84, 0xf4, 0x40, 0xed, 0x6e, 0x91, 0x06, 0x8a, 0xfb, 0x50, 0x0c,
	0x1e, 0xe2, 0xd1, 0x5d, 0xc0, 0x5e, 0x59, 0x88, 0x7e, 0x4a, 0x1c, 0xee, 0xfb, 0x52, 0x2f, 0x82,
	0x97, 0x58, 0x8d, 0xf2, 0xff, 0x31, 0xca, 0xbb, 0xd7, 0xf6, 0x71, 0x35, 0xde, 0xf0, 0x79, 0x70,
	0xc9, 0xe7, 0x20, 0x32, 0xe8, 0xe5, 0x8f, 0xcc, 0x27, 0x4a, 0x39, 0xd7, 0xb6, 0x58, 0x7a, 0x33,
	0xcc, 0x8f, 0xb7, 0xcc, 0xa7, 0x43, 0x39, 0xd7, 0xa2, 0xbb, 0x54, 0x49, 0x84, 0x39, 0xe6, 0x3c,
	0xb6, 0x0b, 0x01, 0xd0, 0xc9, 0xa5, 0x9b, 0xb3, 0xa9, 0xee, 0x1e, 0x8f, 0xe1, 0xb7, 0xfc, 0x2c,
	0xdc, 0x37, 0xca, 0x40, 0xd3, 0x58, 0x5b, 0xec, 0xa7, 0xe1, 0x51, 0xfb, 0xc7, 0x16, 0x7e, 0x40,
	0x67, 0x93, 0xff, 0x4d, 0x6a, 0x93, 0xfa, 0xd4, 0xcc, 0x3e, 0xfe, 0x33, 0x00, 0x00, 0xff, 0xff,
	0x0d, 0x71, 0x4c, 0xf1, 0xa3, 0x0b, 0x00, 0x00,
}
