// Code generated by protoc-gen-go.
// source: settings_master.proto
// DO NOT EDIT!

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of Gender from enums.proto

// Ignoring public import of ItemCategory from enums.proto

// Ignoring public import of PokemonFamilyId from enums.proto

// Ignoring public import of PokemonId from enums.proto

// Ignoring public import of Platform from enums.proto

// Ignoring public import of ActivityType from enums.proto

// Ignoring public import of TutorialState from enums.proto

// Ignoring public import of PokemonMovementType from enums.proto

// Ignoring public import of ItemEffect from enums.proto

// Ignoring public import of HoloIapItemCategory from enums.proto

// Ignoring public import of PokemonRarity from enums.proto

// Ignoring public import of BadgeType from enums.proto

// Ignoring public import of CameraInterpolation from enums.proto

// Ignoring public import of PokemonMove from enums.proto

// Ignoring public import of TeamColor from enums.proto

// Ignoring public import of CameraTarget from enums.proto

// Ignoring public import of PokemonType from enums.proto

// Ignoring public import of ItemAward from inventory_item.proto

// Ignoring public import of ItemData from inventory_item.proto

// Ignoring public import of ItemType from inventory_item.proto

// Ignoring public import of ItemId from inventory_item.proto

// Ignoring public import of EggIncubatorAttributes from settings_master_item.proto

// Ignoring public import of ExperienceBoostAttributes from settings_master_item.proto

// Ignoring public import of PokeballAttributes from settings_master_item.proto

// Ignoring public import of InventoryUpgradeAttributes from settings_master_item.proto

// Ignoring public import of FortModifierAttributes from settings_master_item.proto

// Ignoring public import of ReviveAttributes from settings_master_item.proto

// Ignoring public import of PotionAttributes from settings_master_item.proto

// Ignoring public import of IncenseAttributes from settings_master_item.proto

// Ignoring public import of FoodAttributes from settings_master_item.proto

// Ignoring public import of BattleAttributes from settings_master_item.proto

// Ignoring public import of CameraAttributes from settings_master_pokemon.proto

// Ignoring public import of StatsAttributes from settings_master_pokemon.proto

// Ignoring public import of EncounterAttributes from settings_master_pokemon.proto

type PokemonSettings_BuddySize int32

const (
	PokemonSettings_BUDDY_MEDIUM   PokemonSettings_BuddySize = 0
	PokemonSettings_BUDDY_SHOULDER PokemonSettings_BuddySize = 1
	PokemonSettings_BUDDY_BIG      PokemonSettings_BuddySize = 2
	PokemonSettings_BUDDY_FLYING   PokemonSettings_BuddySize = 3
)

var PokemonSettings_BuddySize_name = map[int32]string{
	0: "BUDDY_MEDIUM",
	1: "BUDDY_SHOULDER",
	2: "BUDDY_BIG",
	3: "BUDDY_FLYING",
}
var PokemonSettings_BuddySize_value = map[string]int32{
	"BUDDY_MEDIUM":   0,
	"BUDDY_SHOULDER": 1,
	"BUDDY_BIG":      2,
	"BUDDY_FLYING":   3,
}

func (x PokemonSettings_BuddySize) String() string {
	return proto.EnumName(PokemonSettings_BuddySize_name, int32(x))
}
func (PokemonSettings_BuddySize) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor12, []int{5, 0}
}

type EquippedBadgeSettings struct {
	EquipBadgeCooldownMs  int64     `protobuf:"varint,1,opt,name=equip_badge_cooldown_ms,json=equipBadgeCooldownMs" json:"equip_badge_cooldown_ms,omitempty"`
	CatchProbabilityBonus []float32 `protobuf:"fixed32,2,rep,packed,name=catch_probability_bonus,json=catchProbabilityBonus" json:"catch_probability_bonus,omitempty"`
	FleeProbabilityBonus  []float32 `protobuf:"fixed32,3,rep,packed,name=flee_probability_bonus,json=fleeProbabilityBonus" json:"flee_probability_bonus,omitempty"`
}

func (m *EquippedBadgeSettings) Reset()                    { *m = EquippedBadgeSettings{} }
func (m *EquippedBadgeSettings) String() string            { return proto.CompactTextString(m) }
func (*EquippedBadgeSettings) ProtoMessage()               {}
func (*EquippedBadgeSettings) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{0} }

type BadgeSettings struct {
	BadgeType BadgeType `protobuf:"varint,1,opt,name=badge_type,json=badgeType,enum=POGOProtos.Enums.BadgeType" json:"badge_type,omitempty"`
	BadgeRank int32     `protobuf:"varint,2,opt,name=badge_rank,json=badgeRank" json:"badge_rank,omitempty"`
	Targets   []int32   `protobuf:"varint,3,rep,packed,name=targets" json:"targets,omitempty"`
}

func (m *BadgeSettings) Reset()                    { *m = BadgeSettings{} }
func (m *BadgeSettings) String() string            { return proto.CompactTextString(m) }
func (*BadgeSettings) ProtoMessage()               {}
func (*BadgeSettings) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{1} }

type GymBattleSettings struct {
	EnergyPerSec                  float32 `protobuf:"fixed32,1,opt,name=energy_per_sec,json=energyPerSec" json:"energy_per_sec,omitempty"`
	DodgeEnergyCost               float32 `protobuf:"fixed32,2,opt,name=dodge_energy_cost,json=dodgeEnergyCost" json:"dodge_energy_cost,omitempty"`
	RetargetSeconds               float32 `protobuf:"fixed32,3,opt,name=retarget_seconds,json=retargetSeconds" json:"retarget_seconds,omitempty"`
	EnemyAttackInterval           float32 `protobuf:"fixed32,4,opt,name=enemy_attack_interval,json=enemyAttackInterval" json:"enemy_attack_interval,omitempty"`
	AttackServerInterval          float32 `protobuf:"fixed32,5,opt,name=attack_server_interval,json=attackServerInterval" json:"attack_server_interval,omitempty"`
	RoundDurationSeconds          float32 `protobuf:"fixed32,6,opt,name=round_duration_seconds,json=roundDurationSeconds" json:"round_duration_seconds,omitempty"`
	BonusTimePerAllySeconds       float32 `protobuf:"fixed32,7,opt,name=bonus_time_per_ally_seconds,json=bonusTimePerAllySeconds" json:"bonus_time_per_ally_seconds,omitempty"`
	MaximumAttackersPerBattle     int32   `protobuf:"varint,8,opt,name=maximum_attackers_per_battle,json=maximumAttackersPerBattle" json:"maximum_attackers_per_battle,omitempty"`
	SameTypeAttackBonusMultiplier float32 `protobuf:"fixed32,9,opt,name=same_type_attack_bonus_multiplier,json=sameTypeAttackBonusMultiplier" json:"same_type_attack_bonus_multiplier,omitempty"`
	MaximumEnergy                 int32   `protobuf:"varint,10,opt,name=maximum_energy,json=maximumEnergy" json:"maximum_energy,omitempty"`
	EnergyDeltaPerHealthLost      float32 `protobuf:"fixed32,11,opt,name=energy_delta_per_health_lost,json=energyDeltaPerHealthLost" json:"energy_delta_per_health_lost,omitempty"`
	DodgeDurationMs               int32   `protobuf:"varint,12,opt,name=dodge_duration_ms,json=dodgeDurationMs" json:"dodge_duration_ms,omitempty"`
	MinimumPlayerLevel            int32   `protobuf:"varint,13,opt,name=minimum_player_level,json=minimumPlayerLevel" json:"minimum_player_level,omitempty"`
	SwapDurationMs                int32   `protobuf:"varint,14,opt,name=swap_duration_ms,json=swapDurationMs" json:"swap_duration_ms,omitempty"`
	DodgeDamageReductionPercent   float32 `protobuf:"fixed32,15,opt,name=dodge_damage_reduction_percent,json=dodgeDamageReductionPercent" json:"dodge_damage_reduction_percent,omitempty"`
}

func (m *GymBattleSettings) Reset()                    { *m = GymBattleSettings{} }
func (m *GymBattleSettings) String() string            { return proto.CompactTextString(m) }
func (*GymBattleSettings) ProtoMessage()               {}
func (*GymBattleSettings) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{2} }

type TypeEffectiveSettings struct {
	AttackScalar []float32   `protobuf:"fixed32,1,rep,packed,name=attack_scalar,json=attackScalar" json:"attack_scalar,omitempty"`
	AttackType   PokemonType `protobuf:"varint,2,opt,name=attack_type,json=attackType,enum=POGOProtos.Enums.PokemonType" json:"attack_type,omitempty"`
}

func (m *TypeEffectiveSettings) Reset()                    { *m = TypeEffectiveSettings{} }
func (m *TypeEffectiveSettings) String() string            { return proto.CompactTextString(m) }
func (*TypeEffectiveSettings) ProtoMessage()               {}
func (*TypeEffectiveSettings) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{3} }

type ItemSettings struct {
	ItemId           ItemId                      `protobuf:"varint,1,opt,name=item_id,json=itemId,enum=POGOProtos.Inventory.Item.ItemId" json:"item_id,omitempty"`
	ItemType         ItemType                    `protobuf:"varint,2,opt,name=item_type,json=itemType,enum=POGOProtos.Inventory.Item.ItemType" json:"item_type,omitempty"`
	Category         ItemCategory                `protobuf:"varint,3,opt,name=category,enum=POGOProtos.Enums.ItemCategory" json:"category,omitempty"`
	DropFreq         float32                     `protobuf:"fixed32,4,opt,name=drop_freq,json=dropFreq" json:"drop_freq,omitempty"`
	DropTrainerLevel int32                       `protobuf:"varint,5,opt,name=drop_trainer_level,json=dropTrainerLevel" json:"drop_trainer_level,omitempty"`
	Pokeball         *PokeballAttributes         `protobuf:"bytes,6,opt,name=pokeball" json:"pokeball,omitempty"`
	Potion           *PotionAttributes           `protobuf:"bytes,7,opt,name=potion" json:"potion,omitempty"`
	Revive           *ReviveAttributes           `protobuf:"bytes,8,opt,name=revive" json:"revive,omitempty"`
	Battle           *BattleAttributes           `protobuf:"bytes,9,opt,name=battle" json:"battle,omitempty"`
	Food             *FoodAttributes             `protobuf:"bytes,10,opt,name=food" json:"food,omitempty"`
	InventoryUpgrade *InventoryUpgradeAttributes `protobuf:"bytes,11,opt,name=inventory_upgrade,json=inventoryUpgrade" json:"inventory_upgrade,omitempty"`
	XpBoost          *ExperienceBoostAttributes  `protobuf:"bytes,12,opt,name=xp_boost,json=xpBoost" json:"xp_boost,omitempty"`
	Incense          *IncenseAttributes          `protobuf:"bytes,13,opt,name=incense" json:"incense,omitempty"`
	EggIncubator     *EggIncubatorAttributes     `protobuf:"bytes,14,opt,name=egg_incubator,json=eggIncubator" json:"egg_incubator,omitempty"`
	FortModifier     *FortModifierAttributes     `protobuf:"bytes,15,opt,name=fort_modifier,json=fortModifier" json:"fort_modifier,omitempty"`
}

func (m *ItemSettings) Reset()                    { *m = ItemSettings{} }
func (m *ItemSettings) String() string            { return proto.CompactTextString(m) }
func (*ItemSettings) ProtoMessage()               {}
func (*ItemSettings) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{4} }

func (m *ItemSettings) GetPokeball() *PokeballAttributes {
	if m != nil {
		return m.Pokeball
	}
	return nil
}

func (m *ItemSettings) GetPotion() *PotionAttributes {
	if m != nil {
		return m.Potion
	}
	return nil
}

func (m *ItemSettings) GetRevive() *ReviveAttributes {
	if m != nil {
		return m.Revive
	}
	return nil
}

func (m *ItemSettings) GetBattle() *BattleAttributes {
	if m != nil {
		return m.Battle
	}
	return nil
}

func (m *ItemSettings) GetFood() *FoodAttributes {
	if m != nil {
		return m.Food
	}
	return nil
}

func (m *ItemSettings) GetInventoryUpgrade() *InventoryUpgradeAttributes {
	if m != nil {
		return m.InventoryUpgrade
	}
	return nil
}

func (m *ItemSettings) GetXpBoost() *ExperienceBoostAttributes {
	if m != nil {
		return m.XpBoost
	}
	return nil
}

func (m *ItemSettings) GetIncense() *IncenseAttributes {
	if m != nil {
		return m.Incense
	}
	return nil
}

func (m *ItemSettings) GetEggIncubator() *EggIncubatorAttributes {
	if m != nil {
		return m.EggIncubator
	}
	return nil
}

func (m *ItemSettings) GetFortModifier() *FortModifierAttributes {
	if m != nil {
		return m.FortModifier
	}
	return nil
}

type PokemonSettings struct {
	PokemonId         PokemonId                 `protobuf:"varint,1,opt,name=pokemon_id,json=pokemonId,enum=POGOProtos.Enums.PokemonId" json:"pokemon_id,omitempty"`
	ModelScale        float32                   `protobuf:"fixed32,3,opt,name=model_scale,json=modelScale" json:"model_scale,omitempty"`
	Type              PokemonType               `protobuf:"varint,4,opt,name=type,enum=POGOProtos.Enums.PokemonType" json:"type,omitempty"`
	Type_2            PokemonType               `protobuf:"varint,5,opt,name=type_2,json=type2,enum=POGOProtos.Enums.PokemonType" json:"type_2,omitempty"`
	Camera            *CameraAttributes         `protobuf:"bytes,6,opt,name=camera" json:"camera,omitempty"`
	Encounter         *EncounterAttributes      `protobuf:"bytes,7,opt,name=encounter" json:"encounter,omitempty"`
	Stats             *StatsAttributes          `protobuf:"bytes,8,opt,name=stats" json:"stats,omitempty"`
	QuickMoves        []PokemonMove             `protobuf:"varint,9,rep,packed,name=quick_moves,json=quickMoves,enum=POGOProtos.Enums.PokemonMove" json:"quick_moves,omitempty"`
	CinematicMoves    []PokemonMove             `protobuf:"varint,10,rep,packed,name=cinematic_moves,json=cinematicMoves,enum=POGOProtos.Enums.PokemonMove" json:"cinematic_moves,omitempty"`
	AnimationTime     []float32                 `protobuf:"fixed32,11,rep,packed,name=animation_time,json=animationTime" json:"animation_time,omitempty"`
	EvolutionIds      []PokemonId               `protobuf:"varint,12,rep,packed,name=evolution_ids,json=evolutionIds,enum=POGOProtos.Enums.PokemonId" json:"evolution_ids,omitempty"`
	EvolutionPips     int32                     `protobuf:"varint,13,opt,name=evolution_pips,json=evolutionPips" json:"evolution_pips,omitempty"`
	Rarity            PokemonRarity             `protobuf:"varint,14,opt,name=rarity,enum=POGOProtos.Enums.PokemonRarity" json:"rarity,omitempty"`
	PokedexHeightM    float32                   `protobuf:"fixed32,15,opt,name=pokedex_height_m,json=pokedexHeightM" json:"pokedex_height_m,omitempty"`
	PokedexWeightKg   float32                   `protobuf:"fixed32,16,opt,name=pokedex_weight_kg,json=pokedexWeightKg" json:"pokedex_weight_kg,omitempty"`
	ParentPokemonId   PokemonId                 `protobuf:"varint,17,opt,name=parent_pokemon_id,json=parentPokemonId,enum=POGOProtos.Enums.PokemonId" json:"parent_pokemon_id,omitempty"`
	HeightStdDev      float32                   `protobuf:"fixed32,18,opt,name=height_std_dev,json=heightStdDev" json:"height_std_dev,omitempty"`
	WeightStdDev      float32                   `protobuf:"fixed32,19,opt,name=weight_std_dev,json=weightStdDev" json:"weight_std_dev,omitempty"`
	KmDistanceToHatch float32                   `protobuf:"fixed32,20,opt,name=km_distance_to_hatch,json=kmDistanceToHatch" json:"km_distance_to_hatch,omitempty"`
	FamilyId          PokemonFamilyId           `protobuf:"varint,21,opt,name=family_id,json=familyId,enum=POGOProtos.Enums.PokemonFamilyId" json:"family_id,omitempty"`
	CandyToEvolve     int32                     `protobuf:"varint,22,opt,name=candy_to_evolve,json=candyToEvolve" json:"candy_to_evolve,omitempty"`
	KmBuddyDistance   float32                   `protobuf:"fixed32,23,opt,name=km_buddy_distance,json=kmBuddyDistance" json:"km_buddy_distance,omitempty"`
	BuddySize         PokemonSettings_BuddySize `protobuf:"varint,24,opt,name=buddy_size,json=buddySize,enum=POGOProtos.Settings.Master.PokemonSettings_BuddySize" json:"buddy_size,omitempty"`
}

func (m *PokemonSettings) Reset()                    { *m = PokemonSettings{} }
func (m *PokemonSettings) String() string            { return proto.CompactTextString(m) }
func (*PokemonSettings) ProtoMessage()               {}
func (*PokemonSettings) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{5} }

func (m *PokemonSettings) GetCamera() *CameraAttributes {
	if m != nil {
		return m.Camera
	}
	return nil
}

func (m *PokemonSettings) GetEncounter() *EncounterAttributes {
	if m != nil {
		return m.Encounter
	}
	return nil
}

func (m *PokemonSettings) GetStats() *StatsAttributes {
	if m != nil {
		return m.Stats
	}
	return nil
}

type IapSettings struct {
	DailyBonusCoins                int32    `protobuf:"varint,1,opt,name=daily_bonus_coins,json=dailyBonusCoins" json:"daily_bonus_coins,omitempty"`
	DailyDefenderBonusPerPokemon   []int32  `protobuf:"varint,2,rep,packed,name=daily_defender_bonus_per_pokemon,json=dailyDefenderBonusPerPokemon" json:"daily_defender_bonus_per_pokemon,omitempty"`
	DailyDefenderBonusMaxDefenders int32    `protobuf:"varint,3,opt,name=daily_defender_bonus_max_defenders,json=dailyDefenderBonusMaxDefenders" json:"daily_defender_bonus_max_defenders,omitempty"`
	DailyDefenderBonusCurrency     []string `protobuf:"bytes,4,rep,name=daily_defender_bonus_currency,json=dailyDefenderBonusCurrency" json:"daily_defender_bonus_currency,omitempty"`
	MinTimeBetweenClaimsMs         int64    `protobuf:"varint,5,opt,name=min_time_between_claims_ms,json=minTimeBetweenClaimsMs" json:"min_time_between_claims_ms,omitempty"`
	DailyBonusEnabled              bool     `protobuf:"varint,6,opt,name=daily_bonus_enabled,json=dailyBonusEnabled" json:"daily_bonus_enabled,omitempty"`
	DailyDefenderBonusEnabled      bool     `protobuf:"varint,7,opt,name=daily_defender_bonus_enabled,json=dailyDefenderBonusEnabled" json:"daily_defender_bonus_enabled,omitempty"`
}

func (m *IapSettings) Reset()                    { *m = IapSettings{} }
func (m *IapSettings) String() string            { return proto.CompactTextString(m) }
func (*IapSettings) ProtoMessage()               {}
func (*IapSettings) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{6} }

type PokemonUpgradeSettings struct {
	UpgradesPerLevel         int32   `protobuf:"varint,1,opt,name=upgrades_per_level,json=upgradesPerLevel" json:"upgrades_per_level,omitempty"`
	AllowedLevelsAbovePlayer int32   `protobuf:"varint,2,opt,name=allowed_levels_above_player,json=allowedLevelsAbovePlayer" json:"allowed_levels_above_player,omitempty"`
	CandyCost                []int32 `protobuf:"varint,3,rep,packed,name=candy_cost,json=candyCost" json:"candy_cost,omitempty"`
	StardustCost             []int32 `protobuf:"varint,4,rep,packed,name=stardust_cost,json=stardustCost" json:"stardust_cost,omitempty"`
}

func (m *PokemonUpgradeSettings) Reset()                    { *m = PokemonUpgradeSettings{} }
func (m *PokemonUpgradeSettings) String() string            { return proto.CompactTextString(m) }
func (*PokemonUpgradeSettings) ProtoMessage()               {}
func (*PokemonUpgradeSettings) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{7} }

type MoveSequenceSettings struct {
	Sequence []string `protobuf:"bytes,1,rep,name=sequence" json:"sequence,omitempty"`
}

func (m *MoveSequenceSettings) Reset()                    { *m = MoveSequenceSettings{} }
func (m *MoveSequenceSettings) String() string            { return proto.CompactTextString(m) }
func (*MoveSequenceSettings) ProtoMessage()               {}
func (*MoveSequenceSettings) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{8} }

type PlayerLevelSettings struct {
	RankNum                 []int32   `protobuf:"varint,1,rep,packed,name=rank_num,json=rankNum" json:"rank_num,omitempty"`
	RequiredExperience      []int32   `protobuf:"varint,2,rep,packed,name=required_experience,json=requiredExperience" json:"required_experience,omitempty"`
	CpMultiplier            []float32 `protobuf:"fixed32,3,rep,packed,name=cp_multiplier,json=cpMultiplier" json:"cp_multiplier,omitempty"`
	MaxEggPlayerLevel       int32     `protobuf:"varint,4,opt,name=max_egg_player_level,json=maxEggPlayerLevel" json:"max_egg_player_level,omitempty"`
	MaxEncounterPlayerLevel int32     `protobuf:"varint,5,opt,name=max_encounter_player_level,json=maxEncounterPlayerLevel" json:"max_encounter_player_level,omitempty"`
}

func (m *PlayerLevelSettings) Reset()                    { *m = PlayerLevelSettings{} }
func (m *PlayerLevelSettings) String() string            { return proto.CompactTextString(m) }
func (*PlayerLevelSettings) ProtoMessage()               {}
func (*PlayerLevelSettings) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{9} }

type MoveSettings struct {
	MovementId          PokemonMove `protobuf:"varint,1,opt,name=movement_id,json=movementId,enum=POGOProtos.Enums.PokemonMove" json:"movement_id,omitempty"`
	AnimationId         int32       `protobuf:"varint,2,opt,name=animation_id,json=animationId" json:"animation_id,omitempty"`
	PokemonType         PokemonType `protobuf:"varint,3,opt,name=pokemon_type,json=pokemonType,enum=POGOProtos.Enums.PokemonType" json:"pokemon_type,omitempty"`
	Power               float32     `protobuf:"fixed32,4,opt,name=power" json:"power,omitempty"`
	AccuracyChance      float32     `protobuf:"fixed32,5,opt,name=accuracy_chance,json=accuracyChance" json:"accuracy_chance,omitempty"`
	CriticalChance      float32     `protobuf:"fixed32,6,opt,name=critical_chance,json=criticalChance" json:"critical_chance,omitempty"`
	HealScalar          float32     `protobuf:"fixed32,7,opt,name=heal_scalar,json=healScalar" json:"heal_scalar,omitempty"`
	StaminaLossScalar   float32     `protobuf:"fixed32,8,opt,name=stamina_loss_scalar,json=staminaLossScalar" json:"stamina_loss_scalar,omitempty"`
	TrainerLevelMin     int32       `protobuf:"varint,9,opt,name=trainer_level_min,json=trainerLevelMin" json:"trainer_level_min,omitempty"`
	TrainerLevelMax     int32       `protobuf:"varint,10,opt,name=trainer_level_max,json=trainerLevelMax" json:"trainer_level_max,omitempty"`
	VfxName             string      `protobuf:"bytes,11,opt,name=vfx_name,json=vfxName" json:"vfx_name,omitempty"`
	DurationMs          int32       `protobuf:"varint,12,opt,name=duration_ms,json=durationMs" json:"duration_ms,omitempty"`
	DamageWindowStartMs int32       `protobuf:"varint,13,opt,name=damage_window_start_ms,json=damageWindowStartMs" json:"damage_window_start_ms,omitempty"`
	DamageWindowEndMs   int32       `protobuf:"varint,14,opt,name=damage_window_end_ms,json=damageWindowEndMs" json:"damage_window_end_ms,omitempty"`
	EnergyDelta         int32       `protobuf:"varint,15,opt,name=energy_delta,json=energyDelta" json:"energy_delta,omitempty"`
}

func (m *MoveSettings) Reset()                    { *m = MoveSettings{} }
func (m *MoveSettings) String() string            { return proto.CompactTextString(m) }
func (*MoveSettings) ProtoMessage()               {}
func (*MoveSettings) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{10} }

type EncounterSettings struct {
	SpinBonusThreshold      float32 `protobuf:"fixed32,1,opt,name=spin_bonus_threshold,json=spinBonusThreshold" json:"spin_bonus_threshold,omitempty"`
	ExcellentThrowThreshold float32 `protobuf:"fixed32,2,opt,name=excellent_throw_threshold,json=excellentThrowThreshold" json:"excellent_throw_threshold,omitempty"`
	GreatThrowThreshold     float32 `protobuf:"fixed32,3,opt,name=great_throw_threshold,json=greatThrowThreshold" json:"great_throw_threshold,omitempty"`
	NiceThrowThreshold      float32 `protobuf:"fixed32,4,opt,name=nice_throw_threshold,json=niceThrowThreshold" json:"nice_throw_threshold,omitempty"`
	MilestoneThreshold      int32   `protobuf:"varint,5,opt,name=milestone_threshold,json=milestoneThreshold" json:"milestone_threshold,omitempty"`
}

func (m *EncounterSettings) Reset()                    { *m = EncounterSettings{} }
func (m *EncounterSettings) String() string            { return proto.CompactTextString(m) }
func (*EncounterSettings) ProtoMessage()               {}
func (*EncounterSettings) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{11} }

type IapItemDisplay struct {
	Sku       string              `protobuf:"bytes,1,opt,name=sku" json:"sku,omitempty"`
	Category  HoloIapItemCategory `protobuf:"varint,2,opt,name=category,enum=POGOProtos.Enums.HoloIapItemCategory" json:"category,omitempty"`
	SortOrder int32               `protobuf:"varint,3,opt,name=sort_order,json=sortOrder" json:"sort_order,omitempty"`
	ItemIds   []ItemId            `protobuf:"varint,4,rep,packed,name=item_ids,json=itemIds,enum=POGOProtos.Inventory.Item.ItemId" json:"item_ids,omitempty"`
	Counts    []int32             `protobuf:"varint,5,rep,packed,name=counts" json:"counts,omitempty"`
}

func (m *IapItemDisplay) Reset()                    { *m = IapItemDisplay{} }
func (m *IapItemDisplay) String() string            { return proto.CompactTextString(m) }
func (*IapItemDisplay) ProtoMessage()               {}
func (*IapItemDisplay) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{12} }

type CameraSettings struct {
	NextCamera        string                `protobuf:"bytes,1,opt,name=next_camera,json=nextCamera" json:"next_camera,omitempty"`
	Interpolation     []CameraInterpolation `protobuf:"varint,2,rep,packed,name=interpolation,enum=POGOProtos.Enums.CameraInterpolation" json:"interpolation,omitempty"`
	TargetType        []CameraTarget        `protobuf:"varint,3,rep,packed,name=target_type,json=targetType,enum=POGOProtos.Enums.CameraTarget" json:"target_type,omitempty"`
	EaseInSpeed       []float32             `protobuf:"fixed32,4,rep,packed,name=ease_in_speed,json=easeInSpeed" json:"ease_in_speed,omitempty"`
	EastOutSpeed      []float32             `protobuf:"fixed32,5,rep,packed,name=east_out_speed,json=eastOutSpeed" json:"east_out_speed,omitempty"`
	DurationSeconds   []float32             `protobuf:"fixed32,6,rep,packed,name=duration_seconds,json=durationSeconds" json:"duration_seconds,omitempty"`
	WaitSeconds       []float32             `protobuf:"fixed32,7,rep,packed,name=wait_seconds,json=waitSeconds" json:"wait_seconds,omitempty"`
	TransitionSeconds []float32             `protobuf:"fixed32,8,rep,packed,name=transition_seconds,json=transitionSeconds" json:"transition_seconds,omitempty"`
	AngleDegree       []float32             `protobuf:"fixed32,9,rep,packed,name=angle_degree,json=angleDegree" json:"angle_degree,omitempty"`
	AngleOffsetDegree []float32             `protobuf:"fixed32,10,rep,packed,name=angle_offset_degree,json=angleOffsetDegree" json:"angle_offset_degree,omitempty"`
	PitchDegree       []float32             `protobuf:"fixed32,11,rep,packed,name=pitch_degree,json=pitchDegree" json:"pitch_degree,omitempty"`
	PitchOffsetDegree []float32             `protobuf:"fixed32,12,rep,packed,name=pitch_offset_degree,json=pitchOffsetDegree" json:"pitch_offset_degree,omitempty"`
	RollDegree        []float32             `protobuf:"fixed32,13,rep,packed,name=roll_degree,json=rollDegree" json:"roll_degree,omitempty"`
	DistanceMeters    []float32             `protobuf:"fixed32,14,rep,packed,name=distance_meters,json=distanceMeters" json:"distance_meters,omitempty"`
	HeightPercent     []float32             `protobuf:"fixed32,15,rep,packed,name=height_percent,json=heightPercent" json:"height_percent,omitempty"`
	VertCtrRatio      []float32             `protobuf:"fixed32,16,rep,packed,name=vert_ctr_ratio,json=vertCtrRatio" json:"vert_ctr_ratio,omitempty"`
}

func (m *CameraSettings) Reset()                    { *m = CameraSettings{} }
func (m *CameraSettings) String() string            { return proto.CompactTextString(m) }
func (*CameraSettings) ProtoMessage()               {}
func (*CameraSettings) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{13} }

type GymLevelSettings struct {
	RequiredExperience []int32 `protobuf:"varint,1,rep,packed,name=required_experience,json=requiredExperience" json:"required_experience,omitempty"`
	LeaderSlots        []int32 `protobuf:"varint,2,rep,packed,name=leader_slots,json=leaderSlots" json:"leader_slots,omitempty"`
	TrainerSlots       []int32 `protobuf:"varint,3,rep,packed,name=trainer_slots,json=trainerSlots" json:"trainer_slots,omitempty"`
	SearchRollBonus    []int32 `protobuf:"varint,4,rep,packed,name=search_roll_bonus,json=searchRollBonus" json:"search_roll_bonus,omitempty"`
}

func (m *GymLevelSettings) Reset()                    { *m = GymLevelSettings{} }
func (m *GymLevelSettings) String() string            { return proto.CompactTextString(m) }
func (*GymLevelSettings) ProtoMessage()               {}
func (*GymLevelSettings) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{14} }

func init() {
	proto.RegisterType((*EquippedBadgeSettings)(nil), "POGOProtos.Settings.Master.EquippedBadgeSettings")
	proto.RegisterType((*BadgeSettings)(nil), "POGOProtos.Settings.Master.BadgeSettings")
	proto.RegisterType((*GymBattleSettings)(nil), "POGOProtos.Settings.Master.GymBattleSettings")
	proto.RegisterType((*TypeEffectiveSettings)(nil), "POGOProtos.Settings.Master.TypeEffectiveSettings")
	proto.RegisterType((*ItemSettings)(nil), "POGOProtos.Settings.Master.ItemSettings")
	proto.RegisterType((*PokemonSettings)(nil), "POGOProtos.Settings.Master.PokemonSettings")
	proto.RegisterType((*IapSettings)(nil), "POGOProtos.Settings.Master.IapSettings")
	proto.RegisterType((*PokemonUpgradeSettings)(nil), "POGOProtos.Settings.Master.PokemonUpgradeSettings")
	proto.RegisterType((*MoveSequenceSettings)(nil), "POGOProtos.Settings.Master.MoveSequenceSettings")
	proto.RegisterType((*PlayerLevelSettings)(nil), "POGOProtos.Settings.Master.PlayerLevelSettings")
	proto.RegisterType((*MoveSettings)(nil), "POGOProtos.Settings.Master.MoveSettings")
	proto.RegisterType((*EncounterSettings)(nil), "POGOProtos.Settings.Master.EncounterSettings")
	proto.RegisterType((*IapItemDisplay)(nil), "POGOProtos.Settings.Master.IapItemDisplay")
	proto.RegisterType((*CameraSettings)(nil), "POGOProtos.Settings.Master.CameraSettings")
	proto.RegisterType((*GymLevelSettings)(nil), "POGOProtos.Settings.Master.GymLevelSettings")
	proto.RegisterEnum("POGOProtos.Settings.Master.PokemonSettings_BuddySize", PokemonSettings_BuddySize_name, PokemonSettings_BuddySize_value)
}

func init() { proto.RegisterFile("settings_master.proto", fileDescriptor12) }

var fileDescriptor12 = []byte{
	// 2791 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x59, 0xcb, 0x72, 0xe3, 0xd6,
	0xd1, 0x36, 0xc5, 0xa1, 0x44, 0x1e, 0x52, 0x14, 0x05, 0x49, 0x23, 0x8e, 0xe4, 0xf1, 0x85, 0xfe,
	0xfd, 0x67, 0x9c, 0x4a, 0x64, 0x9b, 0xb6, 0xe3, 0x2a, 0xdb, 0x71, 0x32, 0xba, 0x33, 0x96, 0x2c,
	0x16, 0xa8, 0x29, 0x97, 0x53, 0xa9, 0x42, 0x1d, 0x02, 0x87, 0x14, 0x4a, 0xb8, 0x19, 0x00, 0x29,
	0x29, 0x95, 0x65, 0x36, 0x79, 0x83, 0xbc, 0x44, 0xd6, 0xd9, 0x24, 0xab, 0xac, 0xf2, 0x00, 0xd9,
	0xe4, 0x31, 0x52, 0x79, 0x80, 0xf4, 0xe5, 0x00, 0x04, 0x25, 0x8d, 0xa5, 0xcd, 0x0c, 0xd1, 0xfd,
	0x75, 0xa3, 0x71, 0x4e, 0xdf, 0x25, 0x36, 0x12, 0x95, 0xa6, 0x6e, 0x30, 0x4e, 0x2c, 0x5f, 0x26,
	0xa9, 0x8a, 0x77, 0xa2, 0x38, 0x4c, 0x43, 0x63, 0xab, 0x7f, 0x76, 0x74, 0xd6, 0xc7, 0x9f, 0xc9,
	0xce, 0x40, 0x23, 0x76, 0x4e, 0x09, 0xb1, 0x55, 0x57, 0xc1, 0xc4, 0x4f, 0x18, 0xb8, 0xb5, 0xee,
	0x06, 0x53, 0x15, 0xa4, 0x61, 0x7c, 0x63, 0xb9, 0xa9, 0xf2, 0x35, 0x75, 0xeb, 0x96, 0xd6, 0x22,
	0xef, 0xf9, 0x6d, 0x5e, 0x14, 0x5e, 0x2a, 0x3f, 0x0c, 0x98, 0xdd, 0xf9, 0x5b, 0x49, 0x6c, 0x1c,
	0xfc, 0x30, 0x71, 0xa3, 0x48, 0x39, 0xbb, 0xd2, 0x19, 0xab, 0xec, 0xf5, 0xc6, 0x67, 0x62, 0x53,
	0x21, 0xc3, 0x1a, 0x22, 0xd9, 0xb2, 0xc3, 0xd0, 0x73, 0xc2, 0xab, 0xc0, 0xf2, 0x93, 0x76, 0xe9,
	0x9d, 0xd2, 0x8b, 0xb2, 0xb9, 0x4e, 0x6c, 0x12, 0xda, 0xd3, 0xcc, 0xd3, 0xc4, 0xf8, 0x85, 0xd8,
	0xb4, 0x65, 0x6a, 0x5f, 0x58, 0xa0, 0x7f, 0x28, 0x87, 0xae, 0xe7, 0xa6, 0x37, 0xd6, 0x30, 0x0c,
	0x26, 0x49, 0x7b, 0xe1, 0x9d, 0xf2, 0x8b, 0x05, 0x73, 0x83, 0xd8, 0xfd, 0x19, 0x77, 0x17, 0x99,
	0xc6, 0xa7, 0xe2, 0xe9, 0xc8, 0x53, 0xea, 0x1e, 0xb1, 0x32, 0x89, 0xad, 0x23, 0xf7, 0xb6, 0x54,
	0xe7, 0x8f, 0x25, 0xb1, 0x3c, 0x6f, 0xf6, 0x17, 0x42, 0xb0, 0xc1, 0xe9, 0x4d, 0xa4, 0xc8, 0xd2,
	0x66, 0x77, 0x7b, 0xa7, 0x70, 0xbe, 0x07, 0x74, 0x9c, 0x24, 0x74, 0x0e, 0x10, 0xb3, 0x36, 0xcc,
	0x7e, 0x1a, 0xcf, 0x33, 0xd9, 0x58, 0x06, 0x97, 0x60, 0x6e, 0xe9, 0x45, 0x45, 0xb3, 0x4d, 0x20,
	0x18, 0x6d, 0xb1, 0x94, 0xca, 0x78, 0xac, 0x52, 0xb6, 0xa9, 0x62, 0x66, 0x8f, 0x9d, 0xbf, 0x2c,
	0x8a, 0xd5, 0xa3, 0x1b, 0x7f, 0x57, 0xa6, 0xa9, 0x37, 0x33, 0xe5, 0xff, 0x44, 0x53, 0x05, 0x2a,
	0x1e, 0xdf, 0x58, 0x11, 0x9c, 0x7b, 0xa2, 0x6c, 0x32, 0x67, 0xc1, 0x6c, 0x30, 0xb5, 0xaf, 0xe2,
	0x81, 0xb2, 0x8d, 0x9f, 0x8a, 0x55, 0x27, 0xc4, 0x97, 0x6a, 0xac, 0x1d, 0x26, 0x29, 0xbd, 0x7b,
	0xc1, 0x5c, 0x21, 0xc6, 0x01, 0xd1, 0xf7, 0x80, 0x6c, 0x7c, 0x20, 0x5a, 0xb1, 0xe2, 0x97, 0xa2,
	0xbe, 0x30, 0x70, 0xd0, 0x14, 0x82, 0x66, 0xf4, 0x01, 0x93, 0x8d, 0xae, 0xd8, 0x00, 0x85, 0xfe,
	0x8d, 0x05, 0x36, 0x49, 0xfb, 0xd2, 0x72, 0x03, 0xb8, 0xfc, 0xa9, 0xf4, 0xda, 0x4f, 0x08, 0xbf,
	0x46, 0xcc, 0x97, 0xc4, 0xeb, 0x69, 0x16, 0xde, 0x81, 0x46, 0x27, 0x40, 0x40, 0x3f, 0xca, 0x84,
	0x2a, 0x24, 0xb4, 0xce, 0xdc, 0x01, 0x31, 0x8b, 0x52, 0x71, 0x38, 0x09, 0x1c, 0xcb, 0x99, 0xc4,
	0x32, 0x75, 0xc3, 0x20, 0x37, 0x6d, 0x91, 0xa5, 0x88, 0xbb, 0xaf, 0x99, 0x99, 0x7d, 0x5f, 0x89,
	0x6d, 0xba, 0x5e, 0x2b, 0x75, 0x7d, 0x45, 0x07, 0x24, 0x3d, 0xef, 0x26, 0x17, 0x5d, 0x22, 0xd1,
	0x4d, 0x82, 0x9c, 0x03, 0x02, 0x0e, 0xeb, 0x25, 0xf0, 0x33, 0xe9, 0x5f, 0x89, 0x37, 0x7d, 0x79,
	0xed, 0xfa, 0x13, 0x5f, 0x7f, 0x9f, 0x8a, 0x13, 0x52, 0x32, 0xa4, 0x2b, 0x68, 0x57, 0xe9, 0xee,
	0x9e, 0x69, 0xcc, 0xcb, 0x0c, 0x02, 0x5a, 0xf8, 0x8e, 0x8c, 0x63, 0xf1, 0x6e, 0x22, 0x7d, 0xf6,
	0x92, 0xec, 0x88, 0xd8, 0x1e, 0x7f, 0xe2, 0xa5, 0x6e, 0xe4, 0xb9, 0x2a, 0x6e, 0xd7, 0xc8, 0x88,
	0xe7, 0x08, 0x44, 0xff, 0x60, 0x35, 0xe4, 0x78, 0xa7, 0x39, 0xc8, 0x78, 0x5f, 0x34, 0x33, 0x53,
	0xf8, 0x06, 0xdb, 0x82, 0x5e, 0xbe, 0xac, 0xa9, 0x7c, 0x7d, 0xc6, 0xd7, 0xe2, 0x4d, 0x7d, 0xc1,
	0x8e, 0xf2, 0x52, 0x49, 0xc6, 0x5e, 0x28, 0xe9, 0xa5, 0x17, 0x96, 0x87, 0x37, 0x5e, 0xa7, 0x77,
	0xb5, 0x19, 0xb3, 0x8f, 0x10, 0x30, 0xf6, 0x98, 0x00, 0x27, 0x78, 0xf5, 0xb9, 0x9b, 0xe4, 0xa7,
	0x0c, 0x81, 0xd8, 0xa0, 0x37, 0xb1, 0x9b, 0x64, 0x07, 0x0c, 0x31, 0xf8, 0x91, 0x58, 0xf7, 0xdd,
	0x80, 0x4c, 0x8a, 0x3c, 0x79, 0x03, 0x6f, 0xf2, 0xd4, 0x54, 0x79, 0xed, 0x65, 0x82, 0x1b, 0x9a,
	0xd7, 0x27, 0xd6, 0x09, 0x72, 0x8c, 0x17, 0xa2, 0x95, 0x5c, 0xc9, 0x68, 0x4e, 0x79, 0x93, 0xd0,
	0x4d, 0xa4, 0x17, 0x74, 0xef, 0x89, 0xb7, 0xb4, 0x1d, 0xd2, 0x97, 0x18, 0x2a, 0xca, 0x99, 0xd8,
	0x24, 0x02, 0x5f, 0x64, 0x43, 0x6e, 0x6a, 0xaf, 0xd0, 0x97, 0x6c, 0xb3, 0x51, 0x04, 0x32, 0x33,
	0x4c, 0x9f, 0x21, 0x9d, 0x3f, 0x88, 0x0d, 0x3c, 0xd0, 0x83, 0xd1, 0x48, 0x01, 0x7d, 0x3a, 0x0b,
	0x99, 0xf7, 0xc4, 0x72, 0xe6, 0x81, 0xb6, 0xf4, 0x64, 0x0c, 0x11, 0x83, 0xc1, 0xdf, 0xd0, 0x8e,
	0x47, 0x34, 0x38, 0xca, 0xba, 0x06, 0x51, 0x8c, 0x2f, 0x50, 0x8c, 0x3f, 0xbf, 0x1b, 0xe3, 0x7d,
	0xce, 0x74, 0x14, 0xe5, 0x82, 0x25, 0xf0, 0x77, 0xe7, 0x5f, 0x55, 0xd1, 0xe8, 0x41, 0x86, 0x2c,
	0xe4, 0x8c, 0x25, 0xcc, 0x98, 0x96, 0xeb, 0xe8, 0x84, 0xf1, 0x6e, 0x51, 0x59, 0x2f, 0x4b, 0xb9,
	0x3b, 0x28, 0x44, 0xff, 0xf4, 0x1c, 0x73, 0xd1, 0xa5, 0xff, 0x8d, 0x5f, 0x8b, 0x1a, 0xc9, 0x16,
	0x4c, 0x79, 0xef, 0x01, 0x69, 0x32, 0xa8, 0xea, 0xea, 0x5f, 0xf0, 0xf6, 0x2a, 0xa4, 0x44, 0x35,
	0x06, 0x0c, 0x05, 0x73, 0xb3, 0xfb, 0xd6, 0xdd, 0x6f, 0x41, 0xb9, 0x3d, 0x8d, 0x32, 0x73, 0xbc,
	0xb1, 0x2d, 0x6a, 0x4e, 0x1c, 0x46, 0xd6, 0x28, 0x56, 0x3f, 0xe8, 0xc8, 0xae, 0x22, 0xe1, 0x10,
	0x9e, 0x8d, 0x9f, 0x09, 0x83, 0x98, 0x69, 0x2c, 0xdd, 0x20, 0x77, 0x82, 0x0a, 0x5d, 0x6b, 0x0b,
	0x39, 0xe7, 0xcc, 0x60, 0x17, 0x38, 0x13, 0x55, 0x2c, 0x0d, 0x43, 0x08, 0x43, 0x0a, 0xdc, 0x7a,
	0xf7, 0x93, 0x9d, 0xd7, 0x97, 0x25, 0xfe, 0x9a, 0xbe, 0x16, 0x80, 0xc8, 0x88, 0xdd, 0xe1, 0x24,
	0x55, 0x89, 0x99, 0x2b, 0x31, 0x7a, 0x62, 0x31, 0x0a, 0xf1, 0xd6, 0x29, 0x98, 0xeb, 0xdd, 0x8f,
	0x1f, 0xa1, 0x0e, 0xe1, 0x05, 0x65, 0x5a, 0x01, 0xaa, 0x8a, 0xd5, 0x14, 0x1c, 0x85, 0x02, 0xfb,
	0x31, 0xaa, 0x4c, 0x82, 0x17, 0x55, 0xb1, 0x02, 0x54, 0xa5, 0x73, 0x44, 0xed, 0x91, 0xaa, 0x38,
	0x63, 0x14, 0x55, 0xb1, 0x02, 0x08, 0x85, 0x27, 0xa3, 0x30, 0x74, 0x28, 0xde, 0xeb, 0xdd, 0x0f,
	0x1f, 0x54, 0x74, 0x08, 0xe0, 0x82, 0x1a, 0x12, 0x36, 0x2e, 0xc4, 0xea, 0xac, 0xa6, 0x4f, 0xa2,
	0x71, 0x2c, 0x1d, 0x45, 0xc9, 0xa0, 0xde, 0xfd, 0xf2, 0x41, 0x8d, 0xb9, 0x73, 0xbd, 0x62, 0xc1,
	0x82, 0xf6, 0x96, 0x7b, 0x8b, 0x67, 0xbc, 0x12, 0xd5, 0x6b, 0xa8, 0xe6, 0x21, 0x66, 0x9b, 0x06,
	0xbd, 0xe0, 0x8b, 0x07, 0x5f, 0x70, 0x70, 0x0d, 0x51, 0xed, 0xaa, 0xc0, 0x56, 0xbb, 0x28, 0x57,
	0xd0, 0xbf, 0x74, 0x1d, 0x11, 0xc9, 0x38, 0x81, 0xe0, 0x01, 0x7e, 0x90, 0x28, 0xca, 0x2f, 0xf5,
	0x6e, 0xf7, 0x11, 0x66, 0x13, 0xbe, 0xa8, 0x4d, 0xab, 0x30, 0x7e, 0x27, 0x96, 0xd5, 0x78, 0x0c,
	0x85, 0xc7, 0x9e, 0xc0, 0x29, 0x87, 0x31, 0x65, 0xa1, 0x7a, 0xf7, 0xf3, 0x87, 0x2d, 0x1d, 0x8f,
	0x7b, 0x99, 0x50, 0x41, 0x71, 0x43, 0x15, 0xe8, 0xa8, 0x7d, 0x14, 0xc6, 0xa9, 0xe5, 0x87, 0x8e,
	0x3b, 0xc2, 0x0c, 0xbf, 0xf2, 0x48, 0xed, 0x87, 0x20, 0x75, 0xaa, 0x85, 0x8a, 0xda, 0x47, 0x05,
	0x7a, 0xe7, 0x3f, 0x42, 0xac, 0xe8, 0x9c, 0x53, 0x6c, 0x47, 0x74, 0xc3, 0x35, 0xcb, 0x2e, 0xdb,
	0xaf, 0x4d, 0x55, 0x90, 0x57, 0x6a, 0x51, 0xf6, 0xd3, 0x78, 0x5b, 0xd4, 0xc1, 0x50, 0xe5, 0x51,
	0x2e, 0x54, 0xba, 0xd0, 0x0b, 0x22, 0x61, 0x26, 0x54, 0xc6, 0xc7, 0xe2, 0x09, 0xa5, 0x9d, 0x27,
	0x8f, 0xc9, 0x80, 0x04, 0x85, 0x62, 0xbd, 0x48, 0x25, 0xaf, 0x4b, 0x79, 0xe0, 0x41, 0xa1, 0x0a,
	0x82, 0xbb, 0x70, 0xc7, 0x8b, 0x36, 0x14, 0xc1, 0x58, 0xea, 0xcc, 0xf0, 0xe9, 0x8f, 0x1d, 0x98,
	0x96, 0xdf, 0xd9, 0x23, 0x89, 0x62, 0xdc, 0xb0, 0x0e, 0x70, 0xc4, 0x1a, 0x78, 0x14, 0x34, 0x05,
	0x80, 0xd6, 0xb9, 0xe1, 0xf3, 0xc7, 0x28, 0x3c, 0xc8, 0x84, 0x0a, 0x3a, 0x67, 0x9a, 0x20, 0xb2,
	0x2b, 0x49, 0x2a, 0xa1, 0x39, 0xab, 0x3e, 0x9c, 0xbd, 0x32, 0x95, 0x03, 0x14, 0x28, 0xa8, 0x63,
	0x0d, 0x58, 0x61, 0xa0, 0xb7, 0x85, 0x02, 0xe3, 0x87, 0x53, 0x95, 0x40, 0xa6, 0x28, 0xff, 0xe8,
	0x51, 0x9d, 0x02, 0xca, 0x14, 0x24, 0x81, 0x3f, 0x13, 0xe3, 0x50, 0xac, 0xd8, 0x90, 0x59, 0x7d,
	0x28, 0x9a, 0xb6, 0xd6, 0x21, 0x1e, 0xa3, 0xa3, 0x99, 0x4b, 0xb1, 0x1e, 0xe8, 0x2d, 0x24, 0xd4,
	0x6a, 0x2e, 0xc9, 0xd8, 0x28, 0x41, 0x66, 0xc0, 0x7a, 0xb8, 0x9c, 0x53, 0xb1, 0x37, 0x82, 0x1a,
	0xb4, 0xac, 0xa6, 0xa1, 0x37, 0x21, 0x98, 0xeb, 0x60, 0x5f, 0x50, 0x7e, 0xc8, 0xcf, 0x1a, 0xb9,
	0x44, 0xcf, 0xa1, 0x17, 0xcd, 0x34, 0x44, 0x6e, 0x94, 0xe8, 0x5e, 0x61, 0xa6, 0xb7, 0x0f, 0x44,
	0xe3, 0x73, 0xc8, 0xc3, 0x32, 0x86, 0xee, 0x9b, 0xc2, 0xb2, 0xd9, 0x7d, 0xfb, 0xb5, 0x6f, 0x30,
	0x09, 0x66, 0x6a, 0x38, 0xf6, 0x17, 0xe8, 0xd7, 0x8e, 0xba, 0x86, 0xa6, 0xc7, 0x1d, 0x5f, 0x40,
	0x08, 0xea, 0x3e, 0xa1, 0xa9, 0xe9, 0xc7, 0x44, 0x3e, 0xc5, 0x3e, 0x27, 0x43, 0x5e, 0x31, 0xf2,
	0x72, 0xdc, 0x6e, 0x71, 0x8f, 0xab, 0x19, 0xdf, 0x11, 0xfd, 0x9b, 0xb1, 0x71, 0x04, 0x58, 0x19,
	0x43, 0x96, 0xb3, 0x0a, 0x31, 0xb6, 0xfa, 0x70, 0x8c, 0xad, 0xb0, 0x54, 0x4e, 0xc0, 0x4e, 0x5d,
	0x9b, 0x95, 0xa4, 0xd0, 0xc7, 0xaa, 0x69, 0xdb, 0xe0, 0x4e, 0x9d, 0xa9, 0x83, 0xd4, 0xd9, 0x57,
	0x53, 0x44, 0x5d, 0xcd, 0xa3, 0xd6, 0x18, 0x75, 0x55, 0x44, 0x7d, 0x28, 0xd6, 0x2f, 0x7d, 0xcb,
	0x71, 0xc1, 0x93, 0x20, 0xa7, 0x59, 0x69, 0x68, 0x5d, 0xe0, 0xc0, 0xd3, 0x5e, 0x27, 0xec, 0xea,
	0xa5, 0xbf, 0xaf, 0x59, 0xe7, 0xe1, 0x31, 0x32, 0xc0, 0xd9, 0x6a, 0x23, 0xe9, 0xbb, 0xd0, 0xfc,
	0x82, 0xf5, 0x1b, 0x77, 0xfb, 0x8f, 0x39, 0xeb, 0x0f, 0x09, 0x09, 0xdf, 0x50, 0x1d, 0xe9, 0x5f,
	0xc6, 0xff, 0x83, 0xb3, 0xc9, 0xc0, 0xb9, 0xc1, 0x57, 0xe1, 0x75, 0x41, 0x95, 0x7c, 0xca, 0x97,
	0x47, 0xe4, 0xf3, 0xf0, 0x80, 0x88, 0x78, 0xb2, 0x60, 0xd8, 0x70, 0xe2, 0x00, 0x34, 0x33, 0xaf,
	0xbd, 0xc9, 0x27, 0x7b, 0xe9, 0xef, 0x22, 0x3d, 0x33, 0xcd, 0x38, 0x87, 0x49, 0x88, 0x80, 0x89,
	0xfb, 0x7b, 0xd5, 0x6e, 0x93, 0x51, 0x9f, 0x3d, 0x22, 0xa0, 0x72, 0x32, 0xa9, 0x1b, 0x80, 0x30,
	0x0c, 0x50, 0xd9, 0xcf, 0x8e, 0x29, 0x6a, 0x39, 0xdd, 0x68, 0x89, 0xc6, 0xee, 0xab, 0xfd, 0xfd,
	0xef, 0xad, 0xd3, 0x83, 0xfd, 0xde, 0xab, 0xd3, 0xd6, 0x1b, 0x86, 0x21, 0x9a, 0x4c, 0x19, 0x1c,
	0x9f, 0xbd, 0x3a, 0xd9, 0x3f, 0x30, 0x5b, 0x25, 0x63, 0x19, 0x44, 0x88, 0xb6, 0xdb, 0x3b, 0x6a,
	0x2d, 0xcc, 0x84, 0x0e, 0x4f, 0xbe, 0xef, 0x7d, 0x7b, 0xd4, 0x2a, 0x77, 0xfe, 0x5e, 0x16, 0xf5,
	0x9e, 0x8c, 0xf2, 0x84, 0x8b, 0x7d, 0xb2, 0xc4, 0xc3, 0xe4, 0x6e, 0xde, 0x0e, 0xdd, 0x80, 0x07,
	0x56, 0xec, 0x93, 0x91, 0x41, 0xfd, 0xfb, 0x1e, 0x92, 0x21, 0x4c, 0xdf, 0x61, 0xac, 0xa3, 0x46,
	0x2a, 0x70, 0x70, 0x7c, 0x20, 0xa1, 0x68, 0x36, 0x26, 0xd3, 0xd0, 0x5a, 0x31, 0xdf, 0x24, 0xdc,
	0xbe, 0x86, 0x91, 0x0a, 0xe8, 0x65, 0xf5, 0x47, 0x1b, 0xbf, 0x11, 0x9d, 0x7b, 0xf5, 0xc0, 0x04,
	0x90, 0x93, 0x78, 0x50, 0xab, 0x98, 0x6f, 0xdd, 0xd5, 0x74, 0x2a, 0xaf, 0xb3, 0xe7, 0xc4, 0x78,
	0x29, 0x9e, 0xdf, 0xab, 0xcb, 0x9e, 0xc4, 0xe0, 0xb3, 0xf6, 0x0d, 0x24, 0xfb, 0xf2, 0x8b, 0x9a,
	0xb9, 0x75, 0x57, 0xcd, 0x9e, 0x46, 0x40, 0xcd, 0xd9, 0x82, 0x16, 0x9f, 0x07, 0xab, 0xa1, 0x4a,
	0xaf, 0x94, 0x0a, 0x2c, 0xdb, 0x93, 0xae, 0x9f, 0x60, 0x5b, 0x5f, 0xa1, 0xe1, 0xfd, 0x29, 0x20,
	0x30, 0x77, 0xec, 0x32, 0x7f, 0x8f, 0xd8, 0xd0, 0xde, 0xef, 0x88, 0xb5, 0xe2, 0xf1, 0xa9, 0x40,
	0x0e, 0x3d, 0xe5, 0x50, 0xda, 0xaf, 0x9a, 0xab, 0xb3, 0x03, 0x3c, 0x60, 0x06, 0x0e, 0x62, 0xf7,
	0x9a, 0x9b, 0x09, 0x2e, 0x91, 0xe0, 0xb3, 0xbb, 0xd6, 0x6a, 0x05, 0x9d, 0x7f, 0x96, 0xc4, 0x53,
	0x7d, 0x8e, 0xba, 0x51, 0xc9, 0xaf, 0x12, 0xfa, 0x57, 0xdd, 0x10, 0xf1, 0x95, 0x70, 0xff, 0xca,
	0x77, 0xd9, 0xca, 0x38, 0xfd, 0xac, 0x7f, 0xfd, 0xa5, 0xd8, 0x86, 0xae, 0x33, 0xbc, 0x52, 0x0e,
	0x03, 0x13, 0x4b, 0x0e, 0x21, 0x89, 0xea, 0x09, 0x48, 0x4f, 0xf3, 0x6d, 0x0d, 0x21, 0x91, 0xe4,
	0x25, 0x02, 0x78, 0x0c, 0xc2, 0xd9, 0x9f, 0xa3, 0x88, 0xe6, 0x6f, 0x9e, 0xef, 0x6b, 0x44, 0xa1,
	0xc9, 0x1b, 0x06, 0x13, 0x08, 0x8d, 0xd8, 0x99, 0x24, 0x29, 0x23, 0x9e, 0x10, 0xa2, 0x91, 0x11,
	0x11, 0xd4, 0xe9, 0x8a, 0x75, 0xcc, 0xdb, 0x03, 0xf5, 0xc3, 0x04, 0x5b, 0xa6, 0xfc, 0x43, 0xb6,
	0x44, 0x35, 0xd1, 0x34, 0x1a, 0x68, 0x6a, 0x66, 0xfe, 0xdc, 0xf9, 0x6f, 0x49, 0xac, 0x15, 0x26,
	0xb1, 0x5c, 0xe6, 0x99, 0xa8, 0xe2, 0x16, 0xc2, 0x82, 0xe0, 0x27, 0x99, 0x8a, 0xb9, 0x84, 0xcf,
	0xdf, 0x4e, 0x7c, 0xc8, 0x30, 0x6b, 0x31, 0xee, 0x5e, 0x60, 0xf4, 0xb2, 0x54, 0xde, 0xa0, 0x69,
	0x4f, 0x35, 0x32, 0xd6, 0xac, 0x75, 0x43, 0xe3, 0xed, 0xa8, 0x38, 0xd8, 0xf2, 0x4a, 0xa5, 0x61,
	0x47, 0x85, 0x39, 0x16, 0xf2, 0x16, 0xfa, 0x2b, 0x76, 0x5f, 0x73, 0x43, 0xe3, 0x13, 0x3a, 0xb8,
	0x55, 0xe0, 0x41, 0x8b, 0x55, 0x9c, 0x19, 0xbf, 0x04, 0x37, 0x43, 0x81, 0xac, 0x00, 0xcf, 0x8b,
	0xf1, 0x98, 0xb1, 0x89, 0x62, 0x19, 0xa0, 0x20, 0xdc, 0xf9, 0x53, 0x45, 0x34, 0xf8, 0xac, 0xf4,
	0xf7, 0x7e, 0x8d, 0xcd, 0xce, 0x54, 0xf9, 0x98, 0xcd, 0xf3, 0x4e, 0xe9, 0xa1, 0x92, 0x9b, 0x49,
	0x40, 0x16, 0x7c, 0x57, 0x34, 0x66, 0xa5, 0x12, 0x14, 0xf0, 0x7d, 0xd7, 0x73, 0x1a, 0x8d, 0x6a,
	0x8d, 0xac, 0x4e, 0x50, 0xdb, 0x54, 0x7e, 0x4c, 0x07, 0x54, 0x8f, 0x66, 0x0f, 0xc6, 0xba, 0xa8,
	0x44, 0xe0, 0x3e, 0xb1, 0x1e, 0xb5, 0xf8, 0xc1, 0xf8, 0x89, 0x58, 0x91, 0x36, 0xc4, 0xa7, 0xb4,
	0xc1, 0x7b, 0x2e, 0x28, 0xad, 0xf2, 0xbe, 0xa4, 0x99, 0x91, 0xf7, 0x88, 0x8a, 0x40, 0x1b, 0xca,
	0xa1, 0x0b, 0xcd, 0x5b, 0x06, 0xe4, 0x15, 0x49, 0x33, 0x23, 0x6b, 0x20, 0x74, 0x7e, 0xb8, 0x1b,
	0xc8, 0x86, 0x60, 0x5e, 0x86, 0x08, 0x24, 0xe9, 0x11, 0x18, 0xc2, 0x14, 0x3c, 0x0f, 0x62, 0x58,
	0xe2, 0xf6, 0x20, 0xc9, 0x80, 0x55, 0xae, 0x31, 0x9a, 0x75, 0x02, 0x1c, 0x8d, 0x87, 0xac, 0x38,
	0x37, 0x05, 0x5a, 0xc0, 0xa7, 0x01, 0x08, 0xb2, 0x62, 0x5a, 0x98, 0x02, 0x4f, 0xdd, 0xe0, 0x1e,
	0xac, 0xbc, 0xd6, 0x3b, 0x8d, 0x79, 0xac, 0xbc, 0x46, 0x2f, 0x9d, 0x8e, 0xae, 0xad, 0x40, 0xfa,
	0x3c, 0xb4, 0xd4, 0xcc, 0x25, 0x78, 0xfe, 0x16, 0x1e, 0xf1, 0x1b, 0xee, 0xae, 0x2a, 0x84, 0x33,
	0xdb, 0x24, 0x7c, 0x22, 0x9e, 0xea, 0x1d, 0xc2, 0x95, 0x1b, 0x38, 0xe1, 0x95, 0x85, 0xb1, 0x94,
	0x22, 0x96, 0x7b, 0x8f, 0x35, 0xe6, 0x7e, 0x47, 0xcc, 0x01, 0xf2, 0x40, 0x08, 0xbc, 0x74, 0x5e,
	0x08, 0x32, 0xca, 0x6c, 0x59, 0xb1, 0x5a, 0x14, 0x39, 0x08, 0x1c, 0x10, 0x00, 0xbf, 0x28, 0xee,
	0x5d, 0xa8, 0xeb, 0x00, 0xbf, 0x28, 0xec, 0x59, 0x3a, 0x7f, 0x5e, 0x10, 0xab, 0xb9, 0x93, 0xe6,
	0x0e, 0xf9, 0x91, 0x58, 0x4f, 0x22, 0x48, 0xa3, 0x7a, 0x4b, 0x75, 0x11, 0xab, 0xe4, 0x22, 0xf4,
	0x1c, 0xbd, 0xc3, 0x33, 0x90, 0x47, 0x89, 0xec, 0x3c, 0xe3, 0x40, 0xde, 0x7d, 0xa6, 0xae, 0x6d,
	0xe5, 0x79, 0xe8, 0xc3, 0x20, 0x00, 0xd6, 0xcd, 0xc4, 0x78, 0xa3, 0xb7, 0x99, 0x03, 0xce, 0x91,
	0x3f, 0x93, 0xed, 0x8a, 0x8d, 0x71, 0xac, 0xe4, 0x5d, 0x39, 0xee, 0xfa, 0xd7, 0x88, 0x79, 0x4b,
	0x06, 0x2c, 0x0c, 0x5c, 0x6c, 0x31, 0x6e, 0x89, 0xb0, 0x73, 0x1a, 0xc8, 0xbb, 0x25, 0x01, 0x99,
	0x03, 0x9a, 0x06, 0x95, 0xa4, 0x61, 0xa0, 0x0a, 0x02, 0x95, 0x6c, 0x2f, 0xa4, 0x59, 0xb9, 0x40,
	0xe7, 0xdf, 0x25, 0xd1, 0x84, 0xea, 0x8a, 0x33, 0x10, 0xf4, 0x06, 0x18, 0xe0, 0x50, 0x82, 0xcb,
	0xc9, 0xe5, 0x84, 0x8e, 0xa1, 0x66, 0xe2, 0x4f, 0x28, 0x59, 0xb3, 0x05, 0x06, 0x6f, 0x40, 0xde,
	0xbf, 0x1b, 0x53, 0xc7, 0xa1, 0x17, 0x6a, 0x4d, 0xf7, 0xec, 0x31, 0x20, 0xfb, 0x26, 0x38, 0x98,
	0x85, 0xb1, 0x43, 0xe9, 0x89, 0x36, 0xaf, 0x48, 0x39, 0x43, 0x82, 0xf1, 0x95, 0xa8, 0xea, 0x05,
	0x4d, 0x42, 0x89, 0xf7, 0x51, 0x1b, 0x9a, 0x25, 0xde, 0xd0, 0x24, 0xc6, 0x53, 0x98, 0x5e, 0xf0,
	0x72, 0xb1, 0xf6, 0x61, 0x8a, 0xd4, 0x4f, 0x9d, 0x7f, 0x54, 0x44, 0x93, 0x87, 0x94, 0xfc, 0xd2,
	0xc1, 0x69, 0x03, 0x75, 0x0d, 0x29, 0x9e, 0xa7, 0x1d, 0xfe, 0x48, 0x81, 0x24, 0x06, 0x1a, 0xdf,
	0x88, 0x65, 0x5a, 0x8a, 0x46, 0xa1, 0x47, 0x7e, 0x4c, 0x59, 0xf7, 0xde, 0x0f, 0x66, 0x81, 0x5e,
	0x11, 0x6c, 0xce, 0xcb, 0x42, 0xf1, 0xac, 0xeb, 0x65, 0xae, 0xce, 0x47, 0xe5, 0xfb, 0x97, 0x3f,
	0xac, 0xea, 0x9c, 0xa0, 0xa6, 0x60, 0x11, 0xca, 0x47, 0x1d, 0x68, 0xfc, 0x65, 0xa2, 0x60, 0x5c,
	0xb6, 0x92, 0x48, 0x29, 0x87, 0x0e, 0x67, 0x01, 0xbc, 0x1b, 0x88, 0xbd, 0x60, 0x80, 0x24, 0xda,
	0x42, 0x43, 0x8f, 0x66, 0x85, 0x93, 0x54, 0x83, 0x2a, 0x9c, 0xfd, 0x91, 0x7a, 0x36, 0x49, 0x19,
	0xf5, 0x81, 0x68, 0xdd, 0xb3, 0xbe, 0x2d, 0xd3, 0x12, 0xfa, 0xd6, 0xe6, 0x16, 0x22, 0xea, 0x4a,
	0xba, 0x69, 0x61, 0x55, 0x4b, 0xef, 0x44, 0x5a, 0x06, 0xf9, 0xb9, 0x30, 0x20, 0x53, 0x04, 0x89,
	0x3b, 0xa7, 0xaf, 0x4a, 0xc0, 0xd5, 0x19, 0xa7, 0xa0, 0x51, 0x06, 0x63, 0x4f, 0x41, 0x88, 0x82,
	0x9f, 0x2b, 0x9a, 0xb7, 0x16, 0x30, 0x77, 0x03, 0x6d, 0x9f, 0x48, 0x98, 0xf0, 0x18, 0x12, 0x8e,
	0x46, 0x09, 0x1c, 0x98, 0x46, 0x0a, 0x56, 0x49, 0xac, 0x33, 0xe2, 0x68, 0x3c, 0xa8, 0x8c, 0x5c,
	0xfc, 0x33, 0x84, 0x06, 0xf2, 0xdc, 0x54, 0x27, 0xda, 0x4c, 0x25, 0x43, 0xe6, 0x55, 0x36, 0x58,
	0x25, 0xb1, 0xe6, 0x54, 0x82, 0x6f, 0xc4, 0xa1, 0xe7, 0x65, 0xb8, 0x65, 0xc2, 0x09, 0x24, 0x69,
	0x00, 0xa4, 0xf7, 0xbc, 0xed, 0xf7, 0x55, 0x8a, 0x3d, 0x5f, 0x93, 0x40, 0xcd, 0x8c, 0x7c, 0x4a,
	0x54, 0x9c, 0xb6, 0xf4, 0xb8, 0x31, 0xdb, 0x99, 0xd2, 0x58, 0xc7, 0x54, 0xbd, 0x25, 0xc5, 0x9b,
	0x9b, 0x2a, 0x08, 0x0a, 0x3b, 0x8d, 0x2d, 0xba, 0x02, 0x98, 0x83, 0xe8, 0xe6, 0x90, 0xba, 0x97,
	0xc6, 0x26, 0xd2, 0x3a, 0x7f, 0x2d, 0x89, 0xd6, 0xd1, 0x8d, 0x3f, 0xdf, 0x3d, 0xbc, 0xa6, 0x45,
	0x28, 0xbd, 0xb6, 0x45, 0x80, 0xf3, 0xf2, 0x94, 0xc4, 0xfe, 0x2d, 0xf1, 0xc2, 0x34, 0xd1, 0xcd,
	0x44, 0x9d, 0x69, 0x03, 0x24, 0x61, 0x17, 0x91, 0xd5, 0x05, 0xc6, 0x70, 0x93, 0xd4, 0xd0, 0x44,
	0x06, 0x41, 0xf1, 0x48, 0x94, 0x8c, 0xe1, 0x54, 0xe9, 0xac, 0xf8, 0x2f, 0x38, 0xdc, 0x2b, 0xad,
	0x30, 0xc3, 0x04, 0x3a, 0x25, 0xce, 0xdd, 0xea, 0x6f, 0x17, 0xe9, 0x8f, 0x50, 0x49, 0xff, 0x8d,
	0x7e, 0xa9, 0xbf, 0xd0, 0x2f, 0x0f, 0xf9, 0xf9, 0x93, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x2d,
	0x66, 0xd9, 0xdd, 0x27, 0x1b, 0x00, 0x00,
}
