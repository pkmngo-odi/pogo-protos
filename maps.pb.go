// Code generated by protoc-gen-go.
// source: maps.proto
// DO NOT EDIT!

/*
Package protos is a generated protocol buffer package.

It is generated from these files:
	maps.proto
	inventory_item.proto
	data_gym.proto
	networking_responses.proto
	data_player.proto
	networking_envelopes.proto
	data_capture.proto
	data_logs.proto
	networking_requests_messages.proto
	data.proto
	map_pokemon.proto
	enums.proto
	settings_master.proto
	data_battle.proto
	settings_master_item.proto
	inventory.proto
	settings.proto
	networking_requests.proto
	map_fort.proto
	settings_master_pokemon.proto

It has these top-level messages:
	SpawnPoint
	MapCell
	ItemAward
	ItemData
	GymMembership
	GymState
	GetHatchedEggsResponse
	GetPlayerProfileResponse
	AttackGymResponse
	AddFortModifierResponse
	UseItemReviveResponse
	EncounterResponse
	GetAssetDigestResponse
	GetPlayerResponse
	UpgradePokemonResponse
	SetContactSettingsResponse
	UseItemPotionResponse
	FortDetailsResponse
	GetSuggestedCodenamesResponse
	GetBuddyWalkedResponse
	CheckAwardedBadgesResponse
	StartGymBattleResponse
	DownloadRemoteConfigVersionResponse
	GetInventoryResponse
	UseItemCaptureResponse
	DownloadItemTemplatesResponse
	FortRecallPokemonResponse
	EchoResponse
	UseItemGymResponse
	UseItemEggIncubatorResponse
	GetGymDetailsResponse
	RecycleInventoryItemResponse
	DiskEncounterResponse
	LevelUpRewardsResponse
	DownloadSettingsResponse
	EvolvePokemonResponse
	UseIncenseResponse
	IncenseEncounterResponse
	NicknamePokemonResponse
	CollectDailyDefenderBonusResponse
	SfidaActionLogResponse
	MarkTutorialCompleteResponse
	GetIncensePokemonResponse
	UseItemXpBoostResponse
	SetPlayerTeamResponse
	SetBuddyPokemonResponse
	CheckCodenameAvailableResponse
	ReleasePokemonResponse
	VerifyChallengeResponse
	PlayerUpdateResponse
	SetFavoritePokemonResponse
	SetAvatarResponse
	EquipBadgeResponse
	GetDownloadUrlsResponse
	CatchPokemonResponse
	CheckChallengeResponse
	CollectDailyBonusResponse
	FortSearchResponse
	EncounterTutorialCompleteResponse
	ClaimCodenameResponse
	FortDeployPokemonResponse
	GetMapObjectsResponse
	PlayerAvatar
	PlayerPublicProfile
	PlayerStats
	PlayerCamera
	ContactSettings
	DailyBonus
	PlayerCurrency
	EquippedBadge
	Currency
	ResponseEnvelope
	Unknown6Response
	Signature
	Unknown6
	RequestEnvelope
	AuthTicket
	CaptureAward
	CaptureProbability
	FortSearchLogEntry
	CatchPokemonLogEntry
	ActionLogEntry
	BuddyPokemonLogEntry
	UseItemEggIncubatorMessage
	NicknamePokemonMessage
	UseItemGymMessage
	UseItemXpBoostMessage
	RecycleInventoryItemMessage
	ReleasePokemonMessage
	GetGymDetailsMessage
	SetContactSettingsMessage
	CatchPokemonMessage
	GetDownloadUrlsMessage
	GetSuggestedCodenamesMessage
	CollectDailyBonusMessage
	GetPlayerProfileMessage
	GetPlayerMessage
	GetHatchedEggsMessage
	DiskEncounterMessage
	SetPlayerTeamMessage
	VerifyChallengeMessage
	DownloadItemTemplatesMessage
	GetMapObjectsMessage
	FortRecallPokemonMessage
	IncenseEncounterMessage
	UpgradePokemonMessage
	LevelUpRewardsMessage
	SfidaActionLogMessage
	CollectDailyDefenderBonusMessage
	EchoMessage
	PlayerUpdateMessage
	FortSearchMessage
	DownloadSettingsMessage
	EncounterMessage
	SetFavoritePokemonMessage
	UseItemCaptureMessage
	EncounterTutorialCompleteMessage
	StartGymBattleMessage
	CheckCodenameAvailableMessage
	CheckAwardedBadgesMessage
	ClaimCodenameMessage
	FortDeployPokemonMessage
	DownloadRemoteConfigVersionMessage
	CheckChallengeMessage
	MarkTutorialCompleteMessage
	SetBuddyPokemonMessage
	AttackGymMessage
	FortDetailsMessage
	EvolvePokemonMessage
	GetAssetDigestMessage
	EquipBadgeMessage
	GetIncensePokemonMessage
	AddFortModifierMessage
	SetAvatarMessage
	GetBuddyWalkedMessage
	UseItemReviveMessage
	UseItemPotionMessage
	UseIncenseMessage
	GetInventoryMessage
	AssetDigestEntry
	DownloadUrlEntry
	BuddyPokemon
	PlayerData
	PlayerBadge
	PokemonData
	PokedexEntry
	MapPokemon
	WildPokemon
	NearbyPokemon
	EquippedBadgeSettings
	BadgeSettings
	GymBattleSettings
	TypeEffectiveSettings
	ItemSettings
	PokemonSettings
	IapSettings
	PokemonUpgradeSettings
	MoveSequenceSettings
	PlayerLevelSettings
	MoveSettings
	EncounterSettings
	IapItemDisplay
	CameraSettings
	GymLevelSettings
	BattlePokemonInfo
	BattleAction
	BattleParticipant
	BattleResults
	BattleLog
	EggIncubatorAttributes
	ExperienceBoostAttributes
	PokeballAttributes
	InventoryUpgradeAttributes
	FortModifierAttributes
	ReviveAttributes
	PotionAttributes
	IncenseAttributes
	FoodAttributes
	BattleAttributes
	InventoryUpgrades
	InventoryUpgrade
	Candy
	InventoryItemData
	InventoryItem
	EggIncubators
	InventoryDelta
	EggIncubator
	AppliedItem
	AppliedItems
	DownloadSettingsAction
	InventorySettings
	MapSettings
	LevelSettings
	GpsSettings
	FortSettings
	GlobalSettings
	Request
	FortSummary
	FortModifier
	FortData
	FortLureInfo
	CameraAttributes
	StatsAttributes
	EncounterAttributes
*/
package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Ignoring public import of FortSummary from map_fort.proto

// Ignoring public import of FortModifier from map_fort.proto

// Ignoring public import of FortData from map_fort.proto

// Ignoring public import of FortLureInfo from map_fort.proto

// Ignoring public import of FortSponsor from map_fort.proto

// Ignoring public import of FortRenderingType from map_fort.proto

// Ignoring public import of FortType from map_fort.proto

// Ignoring public import of MapPokemon from map_pokemon.proto

// Ignoring public import of WildPokemon from map_pokemon.proto

// Ignoring public import of NearbyPokemon from map_pokemon.proto

type MapObjectsStatus int32

const (
	MapObjectsStatus_UNSET_STATUS   MapObjectsStatus = 0
	MapObjectsStatus_SUCCESS        MapObjectsStatus = 1
	MapObjectsStatus_LOCATION_UNSET MapObjectsStatus = 2
)

var MapObjectsStatus_name = map[int32]string{
	0: "UNSET_STATUS",
	1: "SUCCESS",
	2: "LOCATION_UNSET",
}
var MapObjectsStatus_value = map[string]int32{
	"UNSET_STATUS":   0,
	"SUCCESS":        1,
	"LOCATION_UNSET": 2,
}

func (x MapObjectsStatus) String() string {
	return proto.EnumName(MapObjectsStatus_name, int32(x))
}
func (MapObjectsStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SpawnPoint struct {
	Latitude  float64 `protobuf:"fixed64,2,opt,name=latitude" json:"latitude,omitempty"`
	Longitude float64 `protobuf:"fixed64,3,opt,name=longitude" json:"longitude,omitempty"`
}

func (m *SpawnPoint) Reset()                    { *m = SpawnPoint{} }
func (m *SpawnPoint) String() string            { return proto.CompactTextString(m) }
func (*SpawnPoint) ProtoMessage()               {}
func (*SpawnPoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type MapCell struct {
	// S2 geographic area that the cell covers (http://s2map.com/) (https://code.google.com/archive/p/s2-geometry-library/)
	S2CellId             uint64         `protobuf:"varint,1,opt,name=s2_cell_id,json=s2CellId" json:"s2_cell_id,omitempty"`
	CurrentTimestampMs   int64          `protobuf:"varint,2,opt,name=current_timestamp_ms,json=currentTimestampMs" json:"current_timestamp_ms,omitempty"`
	Forts                []*FortData    `protobuf:"bytes,3,rep,name=forts" json:"forts,omitempty"`
	SpawnPoints          []*SpawnPoint  `protobuf:"bytes,4,rep,name=spawn_points,json=spawnPoints" json:"spawn_points,omitempty"`
	DeletedObjects       []string       `protobuf:"bytes,6,rep,name=deleted_objects,json=deletedObjects" json:"deleted_objects,omitempty"`
	IsTruncatedList      bool           `protobuf:"varint,7,opt,name=is_truncated_list,json=isTruncatedList" json:"is_truncated_list,omitempty"`
	FortSummaries        []*FortSummary `protobuf:"bytes,8,rep,name=fort_summaries,json=fortSummaries" json:"fort_summaries,omitempty"`
	DecimatedSpawnPoints []*SpawnPoint  `protobuf:"bytes,9,rep,name=decimated_spawn_points,json=decimatedSpawnPoints" json:"decimated_spawn_points,omitempty"`
	// Pokemon within 2 steps or less.
	WildPokemons []*WildPokemon `protobuf:"bytes,5,rep,name=wild_pokemons,json=wildPokemons" json:"wild_pokemons,omitempty"`
	// Pokemon within 1 step or none.
	CatchablePokemons []*MapPokemon `protobuf:"bytes,10,rep,name=catchable_pokemons,json=catchablePokemons" json:"catchable_pokemons,omitempty"`
	// Pokemon farther away than 2 steps, but still in the area.
	NearbyPokemons []*NearbyPokemon `protobuf:"bytes,11,rep,name=nearby_pokemons,json=nearbyPokemons" json:"nearby_pokemons,omitempty"`
}

func (m *MapCell) Reset()                    { *m = MapCell{} }
func (m *MapCell) String() string            { return proto.CompactTextString(m) }
func (*MapCell) ProtoMessage()               {}
func (*MapCell) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MapCell) GetForts() []*FortData {
	if m != nil {
		return m.Forts
	}
	return nil
}

func (m *MapCell) GetSpawnPoints() []*SpawnPoint {
	if m != nil {
		return m.SpawnPoints
	}
	return nil
}

func (m *MapCell) GetFortSummaries() []*FortSummary {
	if m != nil {
		return m.FortSummaries
	}
	return nil
}

func (m *MapCell) GetDecimatedSpawnPoints() []*SpawnPoint {
	if m != nil {
		return m.DecimatedSpawnPoints
	}
	return nil
}

func (m *MapCell) GetWildPokemons() []*WildPokemon {
	if m != nil {
		return m.WildPokemons
	}
	return nil
}

func (m *MapCell) GetCatchablePokemons() []*MapPokemon {
	if m != nil {
		return m.CatchablePokemons
	}
	return nil
}

func (m *MapCell) GetNearbyPokemons() []*NearbyPokemon {
	if m != nil {
		return m.NearbyPokemons
	}
	return nil
}

func init() {
	proto.RegisterType((*SpawnPoint)(nil), "POGOProtos.Map.SpawnPoint")
	proto.RegisterType((*MapCell)(nil), "POGOProtos.Map.MapCell")
	proto.RegisterEnum("POGOProtos.Map.MapObjectsStatus", MapObjectsStatus_name, MapObjectsStatus_value)
}

func init() { proto.RegisterFile("maps.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 498 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x93, 0x4f, 0x6f, 0xda, 0x40,
	0x10, 0xc5, 0x43, 0x08, 0x01, 0x06, 0x62, 0x60, 0x15, 0x55, 0x16, 0x6a, 0xa5, 0x88, 0xaa, 0x6a,
	0x94, 0x03, 0xaa, 0xc8, 0xb9, 0x87, 0x94, 0x92, 0x34, 0x52, 0x02, 0xae, 0xd7, 0xa8, 0x52, 0x2f,
	0xab, 0xc5, 0xde, 0xb4, 0xdb, 0xfa, 0x9f, 0x3c, 0x8b, 0x50, 0xbe, 0x52, 0x3f, 0x65, 0xd7, 0x6b,
	0xb0, 0x93, 0x48, 0x28, 0x17, 0x34, 0x33, 0xef, 0xcd, 0x1b, 0xff, 0x84, 0x0d, 0x10, 0xf1, 0x14,
	0xc7, 0x69, 0x96, 0xa8, 0x84, 0x58, 0xce, 0xe2, 0x66, 0xe1, 0xe4, 0x25, 0x8e, 0xef, 0x79, 0x3a,
	0xb4, 0xb4, 0xc6, 0x1e, 0x92, 0x4c, 0x15, 0xfa, 0x70, 0x90, 0xf7, 0x69, 0xf2, 0x57, 0x44, 0x49,
	0x5c, 0x8c, 0x46, 0xd7, 0x00, 0x34, 0xe5, 0x9b, 0xd8, 0x49, 0x64, 0xac, 0xc8, 0x10, 0x5a, 0x21,
	0x57, 0x52, 0xad, 0x03, 0x61, 0x1f, 0x9e, 0xd5, 0xce, 0x6b, 0x6e, 0xd9, 0x93, 0xb7, 0xd0, 0x0e,
	0x93, 0xf8, 0x57, 0x21, 0xd6, 0x8d, 0x58, 0x0d, 0x46, 0xff, 0x1a, 0xd0, 0xd4, 0x27, 0xa7, 0x22,
	0x0c, 0xb5, 0x13, 0x70, 0xc2, 0x7c, 0x5d, 0x32, 0x19, 0xd8, 0x35, 0x6d, 0x3d, 0x72, 0x5b, 0x38,
	0xc9, 0xb5, 0xdb, 0x80, 0x7c, 0x82, 0x53, 0x7f, 0x9d, 0x65, 0x22, 0x56, 0x4c, 0xc9, 0x48, 0xa0,
	0xe2, 0x51, 0xca, 0x22, 0x34, 0xf7, 0xea, 0x2e, 0xd9, 0x6a, 0xde, 0x4e, 0xba, 0x47, 0x72, 0x09,
	0x8d, 0x1c, 0x02, 0xf5, 0xd5, 0xfa, 0x79, 0x67, 0xf2, 0x6e, 0xfc, 0x1c, 0x73, 0x7c, 0x9d, 0x13,
	0xe6, 0x3f, 0x5f, 0xb9, 0xe2, 0x6e, 0xe1, 0x25, 0x9f, 0xa1, 0x8b, 0x39, 0x98, 0xe6, 0xd5, 0x64,
	0x68, 0x1f, 0x99, 0xdd, 0xe1, 0xcb, 0xdd, 0x0a, 0xde, 0xed, 0x60, 0x59, 0x23, 0xf9, 0x08, 0xbd,
	0x40, 0x84, 0x42, 0x89, 0x80, 0x25, 0xab, 0x3f, 0xc2, 0xd7, 0x09, 0xc7, 0x3a, 0xa1, 0xed, 0x5a,
	0xdb, 0xf1, 0xa2, 0x98, 0x92, 0x0b, 0x18, 0x48, 0x64, 0x2a, 0x5b, 0xc7, 0x3e, 0xcf, 0xdd, 0xa1,
	0x44, 0x65, 0x37, 0x35, 0x4b, 0xcb, 0xed, 0x49, 0xf4, 0x76, 0xf3, 0x3b, 0x3d, 0x26, 0x37, 0x60,
	0xe5, 0x0f, 0xc7, 0x70, 0x1d, 0x45, 0x3c, 0x93, 0x02, 0xed, 0x96, 0x79, 0xaa, 0xb3, 0xbd, 0x44,
	0xd4, 0x38, 0x1f, 0xdd, 0x93, 0x87, 0xb2, 0xd1, 0x6b, 0xc4, 0x81, 0x37, 0x81, 0xf0, 0x65, 0x64,
	0x2e, 0x3e, 0xc3, 0x6c, 0xbf, 0x8a, 0x79, 0x5a, 0x6e, 0xd2, 0x27, 0xbc, 0xdf, 0xe0, 0x64, 0x23,
	0xc3, 0x60, 0xf7, 0x76, 0xa0, 0xdd, 0x30, 0x41, 0xef, 0x5f, 0x06, 0x39, 0xdb, 0xb7, 0xe7, 0x87,
	0x36, 0x6f, 0x6b, 0xb7, 0xbb, 0xa9, 0x1a, 0x24, 0xdf, 0x81, 0x68, 0x62, 0xff, 0x37, 0x5f, 0x85,
	0xa2, 0x8a, 0x03, 0x13, 0x37, 0xda, 0x17, 0xa7, 0xeb, 0x5d, 0xda, 0xa0, 0xdc, 0x2e, 0x23, 0xe7,
	0xd0, 0x8b, 0x05, 0xcf, 0x56, 0x8f, 0x55, 0x5e, 0xc7, 0xe4, 0x7d, 0xd8, 0x97, 0x37, 0x37, 0xf6,
	0x5d, 0xa4, 0x15, 0x3f, 0x6d, 0xf1, 0x62, 0x06, 0x7d, 0x6d, 0xde, 0xfe, 0x83, 0x54, 0x71, 0xb5,
	0x46, 0xd2, 0x87, 0xee, 0x72, 0x4e, 0x67, 0x1e, 0xa3, 0xde, 0x95, 0xb7, 0xa4, 0xfd, 0x03, 0xd2,
	0x81, 0x26, 0x5d, 0x4e, 0xa7, 0x33, 0x4a, 0xfb, 0x35, 0x42, 0xc0, 0xba, 0x5b, 0x4c, 0xaf, 0xbc,
	0xdb, 0xc5, 0x9c, 0x19, 0x5f, 0xff, 0xf0, 0x4b, 0xeb, 0xe7, 0xb1, 0xf9, 0x88, 0xd0, 0x39, 0x70,
	0x6a, 0xab, 0xa2, 0xbe, 0xfc, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xa5, 0x9a, 0x47, 0xc8, 0x91, 0x03,
	0x00, 0x00,
}
